<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <generator uri="http://jekyllrb.com" version="3.8.6">Jekyll</generator>
  
  
  <link href="https://software.themikejr.com/feed.xml" rel="self" type="application/atom+xml" />
  <link href="https://software.themikejr.com/" rel="alternate" type="text/html" />
  <updated>2019-12-13T15:56:19-05:00</updated>
  <id>https://software.themikejr.com//</id>

  
    <title type="html">Mike Brinker on Software Development</title>
  

  
    <subtitle>Thoughts, opinions, proposals, and lessons-learned from the mind of a Software Developer.</subtitle>
  

  
    <author>
        <name>Mike Brinker</name>
      
      
    </author>
  

  
  
    <entry>
      
      <title type="html">Healthy Codebase Habit: Regular Dependency Updates</title>
      
      
      <link href="https://software.themikejr.com/regular-dependency-updates/" rel="alternate" type="text/html" title="Healthy Codebase Habit: Regular Dependency Updates" />
      
      <published>2019-12-13T00:00:00-05:00</published>
      <updated>2019-12-13T00:00:00-05:00</updated>
      <id>https://software.themikejr.com/regular-dependency-updates</id>
      <content type="html" xml:base="https://software.themikejr.com/regular-dependency-updates/">&lt;p&gt;Do you have a habit of updating your team’s dependencies? Congratulations, you’ve got &lt;strong&gt;fresh&lt;/strong&gt; dependencies.&lt;/p&gt;

&lt;p&gt;Do you lack a habit of upgrading your projects dependencies? Oh man, you’re dependencies are probably &lt;strong&gt;stale&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I’ve learned that it’s better in almost every way to regularly update your dependencies. Read on for more.&lt;/p&gt;

&lt;h2 id=&quot;stale-dependencies&quot;&gt;Stale Dependencies&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Stale dependencies lead to suffering.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;this-is-your-team-on-stale-dependencies&quot;&gt;This is your team on stale dependencies&lt;/h3&gt;

&lt;p&gt;Everyone can guess what happens when you don’t keep your dependencies up to date on a project. Dependencies get out of date, then become harder and harder to upgrade. This is true, but there are actually deeper, darker problems to projects with stale dependencies.&lt;/p&gt;

&lt;p&gt;The first couple of projects that I worked on as a software developer did not value regular dependency updates. They were java projects in a large-ish IT organization. The progression went something like this:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;First, an approved version of a large framework was picked.&lt;/em&gt; This was usually at least the n - 1 version. From here the project began and dependencies would begin to accumulate. There was very little discussion over the fact that as time passed the project dependencies would become more and more out date, but this was the case.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Next, a developer faced a problem and wished to solve it&lt;/em&gt;. A developer faces a problem and realizes that one of the project’s dependencies could easily solve the problem. They go to upgrade a dependency to use it’s new feature and spend a few days in dependency resolution &lt;a href=&quot;https://en.wikipedia.org/wiki/Sheol&quot;&gt;sheol&lt;/a&gt; until they give up.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Then, the team accumulates an identity that is disconnected from its technology community.&lt;/em&gt; The team is stuck on old technology so why read about what is up and coming? Why contribute back to the open source community? Why spend time thinking about ways we can improve and new patterns we can adopt?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Finally, much toil is had and the cycle repeats.&lt;/em&gt;  Silly workarounds solve problems rather than new patterns available latest dependencies. One broken window turns into 50. Eventually a new project needs to be funded to bring the app into a usable state again.&lt;/p&gt;

&lt;p&gt;All in all, stale dependencies cut a team off from its community and the valuable feedback loops contained therein. They incur large costs down the line and make daily life on a software development team less enjoyable.&lt;/p&gt;

&lt;h3 id=&quot;some-problems-with-stale-dependencies&quot;&gt;Some problems with stale dependencies&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Major frameworks lock you into a specific version&lt;/li&gt;
  &lt;li&gt;Difficulties resolving dependencies that have desired features&lt;/li&gt;
  &lt;li&gt;Team becomes a disconnected user of the dependencies they use
    &lt;ul&gt;
      &lt;li&gt;unable to contribute back to the community&lt;/li&gt;
      &lt;li&gt;unable to take advantage&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Cost of modifying product becomes so high, a new project must be funded to upgrade the app once it becomes a security concern or liability&lt;/li&gt;
  &lt;li&gt;All of these negative side effects increase cost in sundry ways&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;fresh-dependencies&quot;&gt;Fresh dependencies&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Fresh dependencies breed new feedback loops&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&quot;this-is-your-team-on-fresh-dependencies&quot;&gt;This is your team on fresh dependencies&lt;/h3&gt;

&lt;p&gt;If you haven’t worked on a project that prioritized fresh dependencies, you may not be aware of the advantages that spring up. I myself was surprised.&lt;/p&gt;

&lt;p&gt;After spending a while on Java projects with stale dependencies, I joined a team in Javascriptland. In Javascriptland, ‘new’ things were happening so often that the team’s evergreen app would become unworkable from an engineering point of view if they didn’t regularly keep dependencies fresh. When I first joined the team I was surprised at how much the codebase was constantly improve. I eventually identified &lt;em&gt;fresh dependencies&lt;/em&gt; as a core practice that enabled these feedback loops.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Dependency updates signal the misuse of frameworks, libraries, and APIs as breaking changes were encountered.&lt;/em&gt; Dependency maintainers regularly find ways that the APIs of their projects are miused or underused. To counter this, they make deprecations and modify the way the dependency should be consumed. Watching these changes happen makes a team aware of things maintainers are doing to improve their product. Often, seeing this happen is infectious and spurs the improvement of internal APIs or even the overall adoption of say functional programming principles over the imperative. Immutability can be contagious.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Constantly improving lint rule sets help developers improve their codebases.&lt;/em&gt;  If you work in Javascriptland you should definitely be taking advantage of establish lint rulesets like the famous &lt;a href=&quot;https://github.com/airbnb/javascript&quot;&gt;Airbnb&lt;/a&gt; repo. Upgrading these rulesets along with your dependencies will often introduce new rules that break your build. Taking time to explore why these rules were introduced and how you can follow them will lead you down new avenues of improving your codebase and programming practices. As the community learns, you learn.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Updating your language/runtime helps you to take advantage of new language features.&lt;/em&gt; Typescript is a great example of this. With typescript, if your regularly update to the latest stable version and read the blog post they produce explaining new features, you are incrementally learning about what will become part of the javascript spec in the next 12 months. Your codebase is able to take advantage of these features right away and you are using them as soon as they come out.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Proactively upgrading dependencies preemptively removes potential blockers.&lt;/em&gt; Rather than finding out you can’t use some feature that you need or that you will have to migrate a bunch of old code to maintain platform support, you will be ahead of the curve on the platforms, frameworks and libs that you use. No more worrying about running out of time to upgrade before something breaks in production.&lt;/p&gt;

&lt;h3 id=&quot;some-advantages-to-fresh-dependencies&quot;&gt;Some advantages to fresh dependencies.&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Dependency updates signal the misuse of frameworks, libraries, and APIs as breaking changes were encountered&lt;/li&gt;
  &lt;li&gt;Constantly improving lint rule sets help developers improve their codebases&lt;/li&gt;
  &lt;li&gt;Updating your language/runtime helps you to take advantage of new language features&lt;/li&gt;
  &lt;li&gt;Proactively upgrading dependencies preemptively removes potential blockers&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;in-sum&quot;&gt;In Sum&lt;/h2&gt;

&lt;p&gt;Keep your team, project, and personal development healthy by updating your codebase’s dependencies at a regular interval. Like our health or our relationships, doing good things often yields unpredictable benefits, while neglecting them will create emergency situations and make you feel like a lame human being.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Please share in the comments: advantages you have seen from keeping dependencies up to date, or stale dependency horror stories you’ve lived through.&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Mike Brinker</name>
          
          
        </author>
      

      
        <category term="Practices" />
      

      

      
        <summary type="html">Do you have a habit of updating your team’s dependencies? Congratulations, you’ve got fresh dependencies.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">‘Who You Are’ is ‘What You Do’</title>
      
      
      <link href="https://software.themikejr.com/who-you-are-is-what-you-do/" rel="alternate" type="text/html" title="'Who You Are' is 'What You Do'" />
      
      <published>2019-07-27T00:00:00-04:00</published>
      <updated>2019-07-27T00:00:00-04:00</updated>
      <id>https://software.themikejr.com/who-you-are-is-what-you-do</id>
      <content type="html" xml:base="https://software.themikejr.com/who-you-are-is-what-you-do/">&lt;p&gt;In the the time that I’ve spent developing software so far in my life, I’ve seen a tendency for folks to create a false dichotomy – a dualism – between accomplishing goals (“pragmatism”) and desiring to accomplish them in the theoretical ‘best way’ (“idealism”). Alas, &lt;em&gt;logic abhors a dualism&lt;/em&gt; and it’s my experience that as soon as you begin creating such a dichotomy, you’ve fallen into a trap. In fact, I’m about to tell you that &lt;em&gt;who you are&lt;/em&gt; (the way you do things and your motivation) is inextricably connected to the things you produce (goals you achieve).&lt;/p&gt;

&lt;p&gt;Let’s look at this first through the lens of organizations and the products they produce. I’ve often seen that when a cultural problem exists in a company (selling things before they exist, not allowing employees to balance their work and life appropriately, favoring results above all else, etc) there is a desire to deliver and fix the cultural problems later. What many do not realize though is that the products produced by a culture are born in that context and bear the mark of their origin. In the same way that &lt;a href=&quot;https://en.wikipedia.org/wiki/Conway%27s_law&quot;&gt;Conway taught us that the shape of an organization impacts the architecture of a system&lt;/a&gt;, we can learn that an organization’s motives shape its methods, and those methods produce a product that resembles its maker.&lt;/p&gt;

&lt;p&gt;Step back for a moment and consider this at the personal level. We often are driven to set goals for ourselves with the hope that once we accomplish said goal, we will have proof that we have become the person that we want to be (a marathon runner, someone with impecible hygiene, etc). James Clear, in his recent book &lt;em&gt;Atomic Habits&lt;/em&gt;, goes to great lengths to show that it is the journey towards a goal that shapes us, not the completion of a goal. One golden quote from the book is:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://jamesclear.com/identity-votes&quot;&gt;Every action you take is a vote for the type of person you wish to become.&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The way you do things shapes who are you, and your identity – your heart – is what drives your actions.&lt;/p&gt;

&lt;p&gt;Now consider this from the software development point of view. Those who buy into the false dichotomy between ideals and results will say things like “we don’t need TDD, we need to ship software” or more perversely “Let’s wait to start using TDD until we get this first release out.” (You can exchange “TDD” in those phrases for other methods such as Continuous Delivery or Evolutionary Database Design) Those who understand that picking only ideals or results is a false choice will realize that “we can only deliver our first release and respond to change if our software can be safely modified”. In fact, favoring results over ideals is itself an ideal. There is no escaping the fact that your value system breeds a culture which births your products. Methods will always come out of ideals or vision, it’s just a matter of what ideal you choose to embrace.&lt;/p&gt;

&lt;p&gt;Once an individual developer, team, or organization understands this, there is a freedom that will arise. They will realize that they can take time to think about how they do things, in fact, they must think about the &lt;em&gt;how&lt;/em&gt;. There are times when it is profitable to slow down and reason about something out of your organization vision rather than a desire to achieve a goal by a certain date.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Don’t agree? Let me know in the comments.&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Mike Brinker</name>
          
          
        </author>
      

      
        <category term="Practices" />
      
        <category term="Teams" />
      

      

      
        <summary type="html">In the the time that I’ve spent developing software so far in my life, I’ve seen a tendency for folks to create a false dichotomy – a dualism – between accomplishing goals (“pragmatism”) and desiring to accomplish them in the theoretical ‘best way’ (“idealism”). Alas, logic abhors a dualism and it’s my experience that as soon as you begin creating such a dichotomy, you’ve fallen into a trap. In fact, I’m about to tell you that who you are (the way you do things and your motivation) is inextricably connected to the things you produce (goals you achieve).</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">The Software Developer’s Path to Wisdom</title>
      
      
      <link href="https://software.themikejr.com/wisdom-path/" rel="alternate" type="text/html" title="The Software Developer's Path to Wisdom" />
      
      <published>2019-05-09T00:00:00-04:00</published>
      <updated>2019-05-09T00:00:00-04:00</updated>
      <id>https://software.themikejr.com/wisdom-path</id>
      <content type="html" xml:base="https://software.themikejr.com/wisdom-path/">&lt;p&gt;Have you ever worked with someone who was seemed able to know the right thing to do in almost all situations? This person wasn’t only very good at solving technical problems but knew how to handle people, systems, and situations too. This was a person that possesed &lt;em&gt;wisdom&lt;/em&gt;. In this blog post I will set out to define wisdom and then present the way that I think about how someone becomes wise in a given domain.&lt;/p&gt;

&lt;h2 id=&quot;wisdom&quot;&gt;Wisdom?&lt;/h2&gt;
&lt;p&gt;What is wisdom? There are many alternative defitions that you will encounter. First, let’s begin with what it isn’t:&lt;/p&gt;

&lt;p&gt;What wisdom is not:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Experience&lt;/li&gt;
  &lt;li&gt;Old age&lt;/li&gt;
  &lt;li&gt;Intellectual prowess&lt;/li&gt;
  &lt;li&gt;Common sense&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Any of the above factors may correlate to a wise person, but wisdom itself is something more. My definition:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;Wisdom&lt;/em&gt; is the ability to understand reality and act accordingly.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Knowledge, experience, and emotional intelligence are all crucial to being able to apply wisdom, but on the whole wisdom comes across as that someone develops over time.&lt;/p&gt;

&lt;h2 id=&quot;the-model-brinkers-model-of-ideological-adoption&quot;&gt;The Model (Brinker’s Model of Ideological Adoption?)&lt;/h2&gt;

&lt;p&gt;As I have thought about the acquisition of wisdom in my life and reflected on various environments in which I have sought it, I began to see a pattern. I noticed that whenever someone is presented with something new (an idea, tool, method, or system) there are stages of adoption which the person undergoes as they try that new thing out. For the sake of example, we’ll just call the thing in question “the new thing”. Here is what I’m calling the stages for now:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Ignorance&lt;/li&gt;
  &lt;li&gt;Awareness&lt;/li&gt;
  &lt;li&gt;Zeal&lt;/li&gt;
  &lt;li&gt;Wisdom&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;ignorance&quot;&gt;Ignorance&lt;/h3&gt;

&lt;p&gt;The first stage, &lt;strong&gt;ignorance&lt;/strong&gt;, is when you are blissfully unaware of &lt;em&gt;the new thing&lt;/em&gt;. You haven’t heard of it. You may have experienced the problem that the new things solves but that’s about it.&lt;/p&gt;

&lt;h3 id=&quot;awareness&quot;&gt;Awareness&lt;/h3&gt;

&lt;p&gt;The second stage, &lt;strong&gt;awareness&lt;/strong&gt;, is when you become aware of &lt;em&gt;the new thing&lt;/em&gt;, but for whatever reason don’t attempt to apply it. Maybe you think it won’t be useful, or maybe you think it will be useful but that you don’t have time to try it out. Finally, you may be aware of &lt;em&gt;the new thing&lt;/em&gt; but don’t fully understand it.&lt;/p&gt;

&lt;h3 id=&quot;zeal&quot;&gt;Zeal&lt;/h3&gt;

&lt;p&gt;The third stage, &lt;strong&gt;zeal&lt;/strong&gt;, is a dangerous one. It could fairly be called the ‘cage stage’ because you should be locked in a cage until you are through it. In this stage you understand &lt;em&gt;the new thing&lt;/em&gt; to a degree and seek to apply it to every thing and every one, often yielding unfortunate results. You haven’t yet learned when &lt;em&gt;the new thing&lt;/em&gt; isn’t applicable, so you are an evangelist for it, blind to any situation where it isn’t useful and self-wise regarding its application. You know you are in this stage when you annoy friends/family/colleagues by blathering on and on about the glory of &lt;em&gt;the new thing&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&quot;wisdom-1&quot;&gt;Wisdom&lt;/h3&gt;

&lt;p&gt;The fourth stage, &lt;strong&gt;wisdom&lt;/strong&gt;, is the stage you want to be in. In this stage, the shininess has worn off a bit, and you are on a journey of knowing when not to use &lt;em&gt;the new thing&lt;/em&gt;. This stage asymptotically approaches perfection. You know you are getting here when you can find some aspect of &lt;em&gt;the new thing&lt;/em&gt; that you disagree with or could be a problem in some contexts. After the cage stage, this is where you become sane and tolerable regarding &lt;em&gt;the new thing&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;wisdom-in-software-development&quot;&gt;Wisdom in Software Development&lt;/h2&gt;

&lt;p&gt;I have seen myself move through these stages at a macro level with regards to software development (and many other things) and also at a micro-level with certain tools, methods, and technologies. For a case study, let’s take a look at the way I adopted Test-Driven Development.&lt;/p&gt;

&lt;h2 id=&quot;a-case-study-test-driven-development&quot;&gt;A Case Study: Test-Driven Development&lt;/h2&gt;

&lt;h3 id=&quot;ignorance-1&quot;&gt;Ignorance&lt;/h3&gt;

&lt;p&gt;In college I had a programming class or two. No one ever mentioned TDD. I had no idea what it was. I did notice that the one programming project I had seemed to break often as I was changing it.&lt;/p&gt;

&lt;h3 id=&quot;awareness-1&quot;&gt;Awareness&lt;/h3&gt;

&lt;p&gt;In my first programming job I joined a team that lived and taught TDD. As soon as I began pairing with my team members I was introduced to the concept. It seemed like it might be helpful, but writing a program that tests the program which I’m writing felt very odd to think about. I always began coding a new feature and then heard one of my coworkers say “did you write a test for that?”. As I learned how to write tests and was introduced to mocks, stubs, and spies, I became proficient but still didn’t consistently write tests first.&lt;/p&gt;

&lt;h3 id=&quot;zeal-1&quot;&gt;Zeal&lt;/h3&gt;

&lt;p&gt;On my first software project as a full-fledged junior, I engaged in TDD with much zeal.&lt;/p&gt;

&lt;p&gt;Was I about to define a class? Write a test first.  &lt;br /&gt;
Extracting something into a private method? Write a test first.&lt;/p&gt;

&lt;p&gt;Not only did I behave this way myself but I demanded that the team maintain a near 100% coverage rate.&lt;/p&gt;

&lt;p&gt;The result?&lt;/p&gt;

&lt;p&gt;The tests were brittle. The slightest refactor caused a lot of rework in the tests. We went to great lengths to test our getters and setters. Some teammates found me annoying.&lt;/p&gt;

&lt;h3 id=&quot;wisdom-2&quot;&gt;Wisdom&lt;/h3&gt;

&lt;p&gt;I eventually realized that some of my tests provided no value. Testing getters and setters didn’t buy us much. And writing a test before defining a class? That was the essence of an overzealous junior developer. I scaled back a bit and focused on writing tests that the project &lt;em&gt;needed&lt;/em&gt;. Eventually I was even able to grok the difference between London and Detroit style TDD and understand where I fit in the scheme of things. At this point people could bear to hear me talk about TDD again. I was even able to mentor and help a few people figure it out along the way. I’m not a zen master by any means, but the benefits that TDD provides as a tool are clear to me and I also understand when it isn’t that helpful. Now I remain on the long road of wisdom.&lt;/p&gt;

&lt;h2 id=&quot;in-sum&quot;&gt;In Sum&lt;/h2&gt;

&lt;p&gt;Hopefully you see some concordance with reality in this model. It’s been a helpful tool for me to understand people and team dynamics in some cases.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;Was this helpful in any way? Did I miss a step? Do you have a better name for this thing? Let me know in the comments.&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Mike Brinker</name>
          
          
        </author>
      

      
        <category term="Practices" />
      

      

      
        <summary type="html">Have you ever worked with someone who was seemed able to know the right thing to do in almost all situations? This person wasn’t only very good at solving technical problems but knew how to handle people, systems, and situations too. This was a person that possesed wisdom. In this blog post I will set out to define wisdom and then present the way that I think about how someone becomes wise in a given domain.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">A Software Engineering Manifesto</title>
      
      
      <link href="https://software.themikejr.com/software-engineering-manifesto-2019/" rel="alternate" type="text/html" title="A Software Engineering Manifesto" />
      
      <published>2019-04-13T00:00:00-04:00</published>
      <updated>2019-04-13T00:00:00-04:00</updated>
      <id>https://software.themikejr.com/software-engineering-manifesto-2019</id>
      <content type="html" xml:base="https://software.themikejr.com/software-engineering-manifesto-2019/">&lt;p&gt;Disclaimer: “Best practices” are less like objective truths and more like pragmatic successes in the software engineering field. This is not to say that the correct way or even &lt;em&gt;best&lt;/em&gt; way of doing something doesn’t exist, but rather given our finiteness and the external forces of the worlds we inhabit, one should expect some variability here. While I state these in the indicative sense (“X shall be Y”) at the end of the day, the best way to write and ship software will differ from context to context and will (hopefully!) look different in coming years.&lt;/p&gt;

&lt;h2 id=&quot;deployments-shall-be&quot;&gt;Deployments Shall Be&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Automated&lt;/li&gt;
  &lt;li&gt;Scheduled&lt;/li&gt;
  &lt;li&gt;Repeatable&lt;/li&gt;
  &lt;li&gt;Often&lt;/li&gt;
  &lt;li&gt;While the system is in use&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;databases-shall-be&quot;&gt;Databases Shall Be&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Migrated automatically during deployments&lt;/li&gt;
  &lt;li&gt;Locally accessible for developers&lt;/li&gt;
  &lt;li&gt;Optimized just in time&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;code-shall-be&quot;&gt;Code Shall Be&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Version controlled&lt;/li&gt;
  &lt;li&gt;Style-enforced at build time by automated tooling&lt;/li&gt;
  &lt;li&gt;As simple as could possibly work&lt;/li&gt;
  &lt;li&gt;Nearly comment free&lt;/li&gt;
  &lt;li&gt;Deleted if unused&lt;/li&gt;
  &lt;li&gt;Test-driven&lt;/li&gt;
  &lt;li&gt;Treated as a liability&lt;/li&gt;
  &lt;li&gt;Paired on as needed&lt;/li&gt;
  &lt;li&gt;Deleted with joy&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;project-management-shall-be&quot;&gt;Project Management Shall Be&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Pull-based&lt;/li&gt;
  &lt;li&gt;Optimized for end-results, not implementation details&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;developers-shall-be&quot;&gt;Developers Shall be&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Courageous to simplify the system in almost all circumstances&lt;/li&gt;
  &lt;li&gt;Teliocentric in their efforts&lt;/li&gt;
  &lt;li&gt;Mildly over-affectionate towards their text editors&lt;/li&gt;
  &lt;li&gt;Allowed to work uninterrupted for generous amounts of time&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;system-design-shall-be&quot;&gt;System Design Shall Be&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Evolving as necessary with every feature&lt;/li&gt;
  &lt;li&gt;Changing as the team’s understanding of the problem domain changes&lt;/li&gt;
  &lt;li&gt;Ultimately enforced at code review time&lt;/li&gt;
  &lt;li&gt;Consistent whenever possible&lt;/li&gt;
  &lt;li&gt;Delegated to widely-used open source implementations when possible&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;p&gt;Did I miss something? Was I completely wrong in some way? Was there something I got right? Let me know in the comments.&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Mike Brinker</name>
          
          
        </author>
      

      
        <category term="Practices" />
      

      

      
        <summary type="html">Disclaimer: “Best practices” are less like objective truths and more like pragmatic successes in the software engineering field. This is not to say that the correct way or even best way of doing something doesn’t exist, but rather given our finiteness and the external forces of the worlds we inhabit, one should expect some variability here. While I state these in the indicative sense (“X shall be Y”) at the end of the day, the best way to write and ship software will differ from context to context and will (hopefully!) look different in coming years.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">An Atlas for Learning React</title>
      
      
      <link href="https://software.themikejr.com/react-atlas/" rel="alternate" type="text/html" title="An Atlas for Learning React" />
      
      <published>2019-03-29T00:00:00-04:00</published>
      <updated>2019-03-29T00:00:00-04:00</updated>
      <id>https://software.themikejr.com/react-atlas</id>
      <content type="html" xml:base="https://software.themikejr.com/react-atlas/">&lt;p&gt;Learning something like &lt;a href=&quot;https://reactjs.org/&quot;&gt;React&lt;/a&gt; takes time. For every excellent react resource that exists on the internet, there are several poorly written tutorials showing you how to make a todo list app. This ‘atlas’ serves as a guide for myself and others. 
It will probably be updated over time.
Information found in the glossary of terms is largely indebted to the various resources mentioned here.&lt;/p&gt;

&lt;h2 id=&quot;conceptual-overviews&quot;&gt;Conceptual Overviews&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://reactjs.org/docs/hello-world.html&quot;&gt;The official React guide to main concepts&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://overreacted.io/react-as-a-ui-runtime/&quot;&gt;React as a UI Runtime&lt;/a&gt; (Learning react from first principles)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;tools&quot;&gt;Tools&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://facebook.github.io/create-react-app/&quot;&gt;Create React App&lt;/a&gt;, A CLI and set of sensible defaults for react projects&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/facebook/react-devtools&quot;&gt;React devtools&lt;/a&gt;, Chrome and Firefox extension fo view react stuff along with dev tools&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ecosystem&quot;&gt;Ecosystem&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://nextjs.org/&quot;&gt;Next.js&lt;/a&gt;, Server-side rendering&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://redux.js.org/&quot;&gt;Redux&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;tutorials&quot;&gt;Tutorials&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://reactjs.org/tutorial/tutorial.html&quot;&gt;Official React Tutorial&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://roadtoreact.com/course-details?courseId=THE_ROAD_TO_REACT_WITH_FIREBASE&quot;&gt;The Road to React with Firebase&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;people&quot;&gt;People&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/jordwalke&quot;&gt;Jordan Walke&lt;/a&gt;, creator of React&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://overreacted.io/&quot;&gt;Dan Abramov&lt;/a&gt;, creator of Redux and Create React App&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;glossary-of-terms&quot;&gt;Glossary of Terms&lt;/h2&gt;

&lt;h3 id=&quot;elements&quot;&gt;Elements&lt;/h3&gt;
&lt;p&gt;React &lt;em&gt;elements&lt;/em&gt; are plain javascript objects that represent something that react will render in the DOM.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Treated as immutable by react&lt;/li&gt;
  &lt;li&gt;Can reference valid DOM tags or user-created components&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;components&quot;&gt;Components&lt;/h3&gt;
&lt;p&gt;React &lt;em&gt;components&lt;/em&gt; functions or instances of classes that receive props and return elements.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Can be as simple as a js function that receives an object and returns and element&lt;/li&gt;
  &lt;li&gt;Can also be a class that extends &lt;code class=&quot;highlighter-rouge&quot;&gt;React.component&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Components start with an uppercase char&lt;/li&gt;
  &lt;li&gt;Must not mutate props&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;state&quot;&gt;State&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;State&lt;/em&gt; is essentially a property on component classes that is accessible at &lt;code class=&quot;highlighter-rouge&quot;&gt;this.state&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Only mutate state using &lt;code class=&quot;highlighter-rouge&quot;&gt;setState&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;setState&lt;/code&gt; is asynchronous&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;setState&lt;/code&gt; merges properties shallowly&lt;/li&gt;
  &lt;li&gt;state is local to a given component and uses a top-down data flow&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;mounting&quot;&gt;Mounting&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Mouting&lt;/em&gt; is when an element is rendered to the DOM for the first time&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Unmounting&lt;/em&gt; is when an element is removed from the DOM&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;lifecycle-methods&quot;&gt;Lifecycle Methods&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;componentDidMount&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;componentWillUnmount&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;Did you come across some excellent resources when learning React? Did you have a turning point where react suddenly ‘made sense’ to you? Let me know in the comments.&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Mike Brinker</name>
          
          
        </author>
      

      
        <category term="How Things Work" />
      
        <category term="React" />
      

      

      
        <summary type="html">Learning something like React takes time. For every excellent react resource that exists on the internet, there are several poorly written tutorials showing you how to make a todo list app. This ‘atlas’ serves as a guide for myself and others. It will probably be updated over time. Information found in the glossary of terms is largely indebted to the various resources mentioned here.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Linux, Entropy, Random Number Generation, and you</title>
      
      
      <link href="https://software.themikejr.com/linux-entropy-rng/" rel="alternate" type="text/html" title="Linux, Entropy, Random Number Generation, and you" />
      
      <published>2019-03-09T00:00:00-05:00</published>
      <updated>2019-03-09T00:00:00-05:00</updated>
      <id>https://software.themikejr.com/linux-entropy-rng</id>
      <content type="html" xml:base="https://software.themikejr.com/linux-entropy-rng/">&lt;p&gt;Recently while debugging a performance issue with a JRuby application, I learned that the JVM defaults to &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/random&lt;/code&gt; as its randomness source. This default resulted in a performance problem in the application. This post will cover the purpose of &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/random&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/urandom&lt;/code&gt; in general, the cause of the performance problem that I experienced, and the solution that I landed on.&lt;/p&gt;

&lt;h2 id=&quot;why-random-number-generation-rng-is-important-in-computing&quot;&gt;Why Random Number Generation (RNG) is important in computing&lt;/h2&gt;

&lt;p&gt;In most unix-like operating systems, the files located at the path &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/random&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/urandom&lt;/code&gt; server as random number generators. True randomness is a concept that is very important in computing, especially with regards to cryptography. Cryptography often depends on a key or set of keys that are secret. If an actor was able to identify a pattern used to generate secret keys, they could likely find a way to guess what a secret key is. Inserting &lt;em&gt;randomness&lt;/em&gt; into the process of generating a secret key makes it harder for an actor to find a pattern in key generation.&lt;/p&gt;

&lt;p&gt;Think for a moment about how you might write a program that would generate random values. Perhaps the program could do some math on a seed value that results in integers produced that don’t appear to follow any particular pattern. But how does one select a seed? If there is a pattern in the seed used to generate random values then you haven’t accomplished much. One might resort to using a date or timestamp and then performing math to generate a seed but in that case the seed could be guessed easily enough.&lt;/p&gt;

&lt;p&gt;A source of true randomness would be quite valuable and quite difficult to construe.&lt;/p&gt;

&lt;h2 id=&quot;linux-and-rng&quot;&gt;Linux and RNG&lt;/h2&gt;

&lt;p&gt;To accomplish sufficiently random number generation, the linux operating system keeps an ‘entropy pool’ which is a collection of random values that one hopes to be unknown by some malevolent actor. The entropy pool then acts as a seed to a process that tries to ‘randomly’ generate numbers. This results in a stream of random output that is available at &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/random&lt;/code&gt; on the filesystem. The entropy pool is populated from a variety of sources like user input activity and other environmental noise that device drivers may observe.&lt;/p&gt;

&lt;p&gt;Things get a little complicated when the entropy pool runs low.&lt;/p&gt;

&lt;p&gt;When entropy runs low, &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/random&lt;/code&gt; stops or blocks. This causes any process requiring data from the random stream to wait until the entropy pool is full enough to continue generating random numbers. There is another randomness stream on most linux system at &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/urandom&lt;/code&gt; that does not block when the entropy pool runs low. Choosing not to block when the entropy pool runs low can be considered ‘less secure’ but one must think about the situations that can cause this to happen and judge accordingly whether or not &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/urandom&lt;/code&gt; is safe to use.&lt;/p&gt;

&lt;h2 id=&quot;the-jvm-and-devrandom&quot;&gt;The JVM and /dev/random&lt;/h2&gt;

&lt;p&gt;By default, many versions of the JVM will default to using &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/random&lt;/code&gt;. Depending on the size of your entropy pool and your application’s need for random numbers, this can put you in a situation where you are blocked until the entropy pool reaches its required size.&lt;/p&gt;

&lt;p&gt;I noticed the performance problem when I modified a JRuby application to use stronger ciphers for TLS. Presumably the strong ciphers required more random input at times and the entropy pool on my servers wasn’t always up to the task. After doing some research, (I found &lt;a href=&quot;https://www.2uo.de/myths-about-urandom/&quot;&gt;this article&lt;/a&gt; to be helpful) I decided to use &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/urandom/&lt;/code&gt; for the needs of our application.&lt;/p&gt;

&lt;h2 id=&quot;addendum-useful-commands-and-config&quot;&gt;Addendum: Useful commands and config&lt;/h2&gt;

&lt;p&gt;Here are a few helpful commands and settings related to entropy pools in linux and configuring the JVM accordingly. The commands assume RHEL or another system like it.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Available entropy: &lt;code class=&quot;highlighter-rouge&quot;&gt;cat /proc/sys/kernel/random/entropy_avail&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Does a CPU have a hardware RNG? &lt;code class=&quot;highlighter-rouge&quot;&gt;cat /proc/cpuinfo | grep -i rdrand | echo $?&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;JVM flag for default randomness source: &lt;code class=&quot;highlighter-rouge&quot;&gt;-Djava.security.egd=file:/dev/urandom&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;Have you dealt with problems related to &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/random&lt;/code&gt;’s blocking behavior? Did I get something wrong here? Let me know in the comments.&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Mike Brinker</name>
          
          
        </author>
      

      
        <category term="How Things Work" />
      

      

      
        <summary type="html">Recently while debugging a performance issue with a JRuby application, I learned that the JVM defaults to /dev/random as its randomness source. This default resulted in a performance problem in the application. This post will cover the purpose of /dev/random and /dev/urandom in general, the cause of the performance problem that I experienced, and the solution that I landed on.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Refactoring Doesn’t Require Domain Knowledge</title>
      
      
      <link href="https://software.themikejr.com/refactoring-without-domain-knowledge/" rel="alternate" type="text/html" title="Refactoring Doesn't Require Domain Knowledge" />
      
      <published>2019-02-24T00:00:00-05:00</published>
      <updated>2019-02-24T00:00:00-05:00</updated>
      <id>https://software.themikejr.com/refactoring-without-domain-knowledge</id>
      <content type="html" xml:base="https://software.themikejr.com/refactoring-without-domain-knowledge/">&lt;p&gt;I came across this great &lt;a href=&quot;https://twitter.com/GeePawHill&quot;&gt;GeePaw Hill&lt;/a&gt; &lt;a href=&quot;https://twitter.com/GeePawHill/status/1099733643734470656&quot;&gt;thread&lt;/a&gt; on twitter about refactoring and domain knowledge. The final tweet in the thread sums it up well:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;When I’m refactoring, I do my best work when I am entirely domain-blind, and am working with and thinking of all and only what the code that is actually there actually does. Prioritize reading code over studying the application domain.&lt;/p&gt;

  &lt;p&gt;Have a pleasantly odd Sunday!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Over the years I have learned to trust the fact that &lt;em&gt;the code never lies&lt;/em&gt;. In addition to possibly saying some interesting things about epistemology, this aphorism has proven trustful to me time and time again. While devs (and others) &lt;del&gt;argue&lt;/del&gt; discuss what some code does, how it’s working, etc… in almost every case the wise thing to do is say very little and begin reading the code.&lt;/p&gt;

&lt;p&gt;There are lessons in this thread about the value of readable code as well. In the thread, there seems to be a correlation between the refactoring effort (making the code easier to understand) and the discovery of the performance problem. The easier code is to read, the easier it is to reason about, which enables developers to make improvements to it, or at very least decreases their chance of screwing it up as they change it. An explanation of the &lt;em&gt;value&lt;/em&gt; of clean (read: readable) code is worthy of its own post.&lt;/p&gt;

&lt;p&gt;Alas! The whole thread is a great read. &lt;a href=&quot;https://threadreaderapp.com/thread/1099733643734470656.html&quot;&gt;Read it unrolled&lt;/a&gt; on ThreadReader.&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Mike Brinker</name>
          
          
        </author>
      

      
        <category term="What I've Been Reading" />
      

      

      
        <summary type="html">I came across this great GeePaw Hill thread on twitter about refactoring and domain knowledge. The final tweet in the thread sums it up well:</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">IDEs are dead. Long Live Development Environments. (Part 3)</title>
      
      
      <link href="https://software.themikejr.com/build-a-development-environment/" rel="alternate" type="text/html" title="IDEs are dead. Long Live Development Environments. (Part 3)" />
      
      <published>2019-02-10T00:00:00-05:00</published>
      <updated>2019-02-10T00:00:00-05:00</updated>
      <id>https://software.themikejr.com/build-a-development-environment</id>
      <content type="html" xml:base="https://software.themikejr.com/build-a-development-environment/">&lt;p&gt;I’ve already written about &lt;a href=&quot;/step-away-from-your-ide/&quot;&gt;why you should step away from your IDE&lt;/a&gt; and &lt;a href=&quot;/benefits-of-stepping-away-from-your-ide/&quot;&gt;how I’ve benefited from doing so&lt;/a&gt;. Now let’s take a look at how this can be accomplished. As always these steps are based on my experience as a finite human being and thus your mileage may vary. The five steps are:&lt;/p&gt;

&lt;h2 id=&quot;1-begin-using-a-single-tool-directly-outside-of-your-ide&quot;&gt;1. Begin using a single tool directly, outside of your IDE.&lt;/h2&gt;

&lt;p&gt;The first step is begin interacting directly with one of the tools that your IDE abstracts.
Choose a tool, and make it a goal to only use it directly (rather than from inside of your IDE) from now on.
Use the interface that that the tool defaults to. For example, if you choose to use Git directly, use the command line interface rather than another third party client.
If nothing else you will gain the advantage of learning a particular tools in more depth. Some ideas for which tool to pick:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Dependency Management&lt;/li&gt;
  &lt;li&gt;Build System&lt;/li&gt;
  &lt;li&gt;Version Control&lt;/li&gt;
  &lt;li&gt;Test Execution / Coverage&lt;/li&gt;
  &lt;li&gt;Code Quality / Linting Tools&lt;/li&gt;
  &lt;li&gt;Application Servers&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;2-use-all-tools-directly-eventually-only-rely-on-the-text-editor-in-your-ide&quot;&gt;2. Use all tools directly. Eventually only rely on the text editor in your IDE.&lt;/h2&gt;

&lt;p&gt;Repeat step one until you can use all or most of your development tools directly rather than through your IDE. The goal here is for the IDE to basically just become a text editor. At this point your development experience might feel slower than it was before, but what you lose in daily productivity will be rewarded in the long run with a better knowledge and command of your tools.&lt;/p&gt;

&lt;p&gt;This isn’t the place that you want to be long term, so work to get a good understanding of your tools quickly so that you can move onto steps 3 and 4.&lt;/p&gt;

&lt;h2 id=&quot;3-switch-text-editors&quot;&gt;3. Switch text editors.&lt;/h2&gt;

&lt;p&gt;Once you reach step two, you will most likely realize that your IDE is not a great text editor. It’s big, slow, and is most likely lacking advanced features that specialized text editors have. Now that you only really have your IDE because you need a text editor, it’s time to find a &lt;em&gt;your&lt;/em&gt; text editor. Finding the right text editor could be a blog series of its own, but here are a few things to think about.&lt;/p&gt;

&lt;p&gt;Finding &lt;em&gt;your&lt;/em&gt; text editor is what some will call a journey. Ideally you want something that has:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;cross platform support&lt;/li&gt;
  &lt;li&gt;large online community&lt;/li&gt;
  &lt;li&gt;customization capabilities&lt;/li&gt;
  &lt;li&gt;staying power&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Text editors that have these qualities will like have a larger learning curve, but that’s ok! You spend hours of your life editing text &lt;em&gt;every day&lt;/em&gt;. Why not dig in and get good at it? I’m not the first one to say this:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Use a Single Editor Well&lt;/p&gt;

  &lt;p&gt;The editor should be an extension of your hand; make sure your editor is configurable, extensible, and programmable.&lt;/p&gt;

  &lt;p&gt;(From &lt;em&gt;The Pragmatic Programmer)&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;4-slowly-bring-ide-functionality-into-your-text-editor&quot;&gt;4. Slowly bring IDE functionality into your text editor.&lt;/h2&gt;

&lt;p&gt;This step always in progress for most developers. Once you are on the path to mastering your text editor, you will find it beneficial to begin adding little shortcuts to your editor to increase your productivity. For example, rather than switching to new terminal window to run your unit tests, write a macro (or something equivalent for your editor… perhaps a plugin?) that runs all tests in the visible file based upon a keystroke of your choice. Some ideas to enhance productivity in your editor:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A fuzzy finder for file contents or names&lt;/li&gt;
  &lt;li&gt;Ability to see the VCS history for a given file&lt;/li&gt;
  &lt;li&gt;A shortcut to automatically format markup (chunks of XML, JSON, etc…)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At this point I anticipate some objections. Why leave your IDE if the goal is just to rebuild it eventually?
 There are two main reasons why bringing functionality back into your text editor is not just an insane re-doing of what you already had with your IDE.&lt;/p&gt;

&lt;p&gt;First, recognize that by this point you have gained an enhanced knowledge of all the tools in your toolkit and become a text editing wizard. Any shortcut you add back is added from a position of knowledge (of your tools) rather than dependence (on your IDE).&lt;/p&gt;

&lt;p&gt;Second, with this approach you only bring what modifications you need. You will end up with something much lighter than an IDE overall.&lt;/p&gt;

&lt;h2 id=&quot;5-build-your-environment&quot;&gt;5. Build your environment.&lt;/h2&gt;

&lt;p&gt;Now that you are living and working with a set of development tools that you have glued together through your expert knowledge and experience, you can take it one step farther by noticing patterns in your daily development activities and automating those. For example, if you find yourself opening the same three terminal emulator tabs (and starting various tools in them) write a script that does that!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Terminal Emulator: Customized Windows, Tabs, and Panes&lt;/li&gt;
  &lt;li&gt;A Tiling Window Manager: i3, xmonad, kwm, Amethyst&lt;/li&gt;
  &lt;li&gt;Window Manager with the Terminal: Tmux, Tmuxinator, Screen&lt;/li&gt;
  &lt;li&gt;Make your environment portable: Store your configurations on GitHub or create a docker image that houses all of your tools and their dependencies&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;This is how I broke my dependence on an IDE. Have you? Let’s hear how you did it in the comments.&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Mike Brinker</name>
          
          
        </author>
      

      
        <category term="Tools" />
      

      

      
        <summary type="html">I’ve already written about why you should step away from your IDE and how I’ve benefited from doing so. Now let’s take a look at how this can be accomplished. As always these steps are based on my experience as a finite human being and thus your mileage may vary. The five steps are:</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">All Web Abstractions Leak</title>
      
      
      <link href="https://software.themikejr.com/all-web-abstractions-leak/" rel="alternate" type="text/html" title="All Web Abstractions Leak" />
      
      <published>2019-02-02T00:00:00-05:00</published>
      <updated>2019-02-02T00:00:00-05:00</updated>
      <id>https://software.themikejr.com/all-web-abstractions-leak</id>
      <content type="html" xml:base="https://software.themikejr.com/all-web-abstractions-leak/">&lt;p&gt;&lt;a href=&quot;https://twitter.com/garybernhardt&quot;&gt;Gary Bernhardt&lt;/a&gt; had a great thread on twitter recently.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;There’s no such thing as abstraction in web tools and never has been. Every framework claims that it will hide the complexity from you, but it always leaks through. You end up having to understand the framework, its dependencies, and the web primitives they’re built on.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When I first joined a software development team, I remember having my mind &lt;em&gt;blown&lt;/em&gt; as someone on the team walked me through the layers that made up the application. It was a SpringMVC web app that consisted of a view described the user interface, a model that held the data to be plugged into the view, and a controller that tied the model and view together and served requests. Hibernate was also involved in retrieving the data that populated the model. It was like staring under the hood of a car for the first time, seeing how carefully chosen components worked together to create this thing called a ‘web app’. All of those layers! Not to mentioned future joys I would experience like debugging an ORM, tuning a database, becoming fluent in the unspeakable incomprehensibilites of WebSphere, learning languages that compile into other languages, and all of the other things I’ve buried in my subconscious. Early on though it was fascinating to see those layers and exciting to think I was going to be able to contribute to the creation of an application &lt;em&gt;that someone would be using&lt;/em&gt; in real life.&lt;/p&gt;

&lt;p&gt;Now days though, when I consider all of the things someone might have to learn in order to be a productive web developer, it really is daunting. The markup languages, stylesheets, a javascript framework, a language that compiled to JS, a build tool and dependency management, all just for the client side of the application. Imagining a world where the web (good luck well-defining that btw) is as abstracted to a developer and my operating system is to me… well it seems to good to be true.&lt;/p&gt;

&lt;p&gt;The thread as some great examples and comments from others. &lt;a href=&quot;https://threadreaderapp.com/thread/1088523317089169408.html&quot;&gt;Read it unrolled&lt;/a&gt; on ThreadReader.&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Mike Brinker</name>
          
          
        </author>
      

      
        <category term="What I've Been Reading" />
      

      

      
        <summary type="html">Gary Bernhardt had a great thread on twitter recently.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">The One-Hand Approach to Production Support</title>
      
      
      <link href="https://software.themikejr.com/one-hand-approach-to-production-support/" rel="alternate" type="text/html" title="The One-Hand Approach to Production Support" />
      
      <published>2019-01-26T00:00:00-05:00</published>
      <updated>2019-01-26T00:00:00-05:00</updated>
      <id>https://software.themikejr.com/one-hand-approach-to-production-support</id>
      <content type="html" xml:base="https://software.themikejr.com/one-hand-approach-to-production-support/">&lt;p&gt;Across the industry, as the teams trend away from being project-focused toward being product-focused, an increasing number of software developers find themselves being responsible for ‘support duties’. These responsibilities may include answering user questions, attempting to recreate reported bugs, and trying to recover from a system outage in production. There are reasons why it is good (this is the spirit of &lt;em&gt;DevOps&lt;/em&gt; in my opinion) that developers will increasingly participate in these duties, but for teams that are taking these responsibilities on for the first time, confusion abounds.&lt;/p&gt;

&lt;h2 id=&quot;assumptions&quot;&gt;Assumptions&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Production incidents &lt;em&gt;will&lt;/em&gt; happen&lt;/li&gt;
  &lt;li&gt;It is in the best interest of the team and product for developers to become skilled at handing production incidents&lt;/li&gt;
  &lt;li&gt;We should aspire to &lt;a href=&quot;https://en.wikipedia.org/wiki/Antifragility&quot;&gt;Antifragility&lt;/a&gt; in our systems, our teams, and as individuals.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-all-hands-by-default-approach&quot;&gt;The All-Hands by Default Approach&lt;/h2&gt;

&lt;p&gt;To my surprise I have seen managers and developers who prefer an unorganized, all-hands approach to production support. Typically, a scenario will play out like this:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Production incident is reported to some sort of channel that is ‘public’ to all developers&lt;/li&gt;
  &lt;li&gt;Since there is not a dedicated person to handle all issues for this given time frame, a manager type will soon be contacting developers to find out who is working on the issue.&lt;/li&gt;
  &lt;li&gt;Meanwhile, a developer notices the problem and immediately notifies his/her peers&lt;/li&gt;
  &lt;li&gt;Physical or virtual huddle happens and ‘all hands’ are on deck for fixing the issue&lt;/li&gt;
  &lt;li&gt;Typically developers that have more experience with the system (or perhaps have more mature skill sets) lead the troubleshooting until a solution is found&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I suppose developers and managers might prefer this approach for the following reasons:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Having a huddle creates an atmosphere or appearance of productivity and progress&lt;/li&gt;
  &lt;li&gt;When all developers are in the huddle, each can suggest solutions or hypotheses that are unique to their skillset and experience (seemingly shortening the time that it takes to solve the problem)&lt;/li&gt;
  &lt;li&gt;From a developer’s point of view, this approach may provide more &lt;em&gt;psychological safety&lt;/em&gt; since they aren’t the only one working on an issue&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;problems-of-the-all-hands-approach&quot;&gt;Problems of the All-Hands Approach&lt;/h2&gt;

&lt;p&gt;There are hidden costs to the all-hands approach.&lt;/p&gt;

&lt;p&gt;First, it may seem like having a support incident channel that is public to all developers is a good idea, but I think what most managers don’t realize is the amount of distraction that channels such as these create. If a developer is told that part of their job responsibility is to monitor logged incidents, their concentration is going to be almost &lt;a href=&quot;http://calnewport.com/blog/2016/09/06/a-productivity-lesson-from-a-classic-arcade-game/&quot;&gt;permanently compromised&lt;/a&gt; to some degree. One extreme example I recently heard was a developer, who faced with the responsibilities of supporting an application, opened up the application logs &lt;em&gt;every morning&lt;/em&gt; and had them visible on her screen for the entire day. If something went wrong with the application, she claimed to be able to detect a change in the shape of the text that was flowing on the screen. Imagine if this person’s manager understood that this person was compromising their concentration nearly 100% of the time to visually monitor application logs!&lt;/p&gt;

&lt;p&gt;Less extreme situations still are quite a drain on a developer’s ability to focus. If you are not convinced of this I suggest taking a look at &lt;a href=&quot;http://calnewport.com/books/deep-work/&quot;&gt;Deep Work&lt;/a&gt; by Cal Newport (decent summary &lt;a href=&quot;https://fastertomaster.com/deep-work-by-cal-newport/&quot;&gt;here&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;In addition to a near constant compromising of developer focus, consider the sheer &lt;em&gt;cost&lt;/em&gt; of involving everyone on the team in each production incident. As I mentioned in point number five of the &lt;em&gt;All Hands&lt;/em&gt; approach, it has often been my observation that despite all hands being present, a single developer usually ends up leading the charge at finding a solution and applying it. Given this, it is especially egregious to think that all of the members are pulled into a huddle for the incident when a subset of them will actually be contributing meaningfully to the solution.&lt;/p&gt;

&lt;h2 id=&quot;the-one-hand-by-default-approach&quot;&gt;The One-Hand (by Default) Approach&lt;/h2&gt;

&lt;p&gt;What if I could suggest an approach to handling production support that decreased distraction to the team and fostered improvement of skills and self-confidence for individual developers? That’s exactly what the &lt;em&gt;One-Hand&lt;/em&gt; approach is. It goes something like this:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Notifications of production incidents are fed to a developer who is ‘on call’ for the given time period (let’s say they are on call for the current week). Developers who are not on call are expected to continue with their normal work.&lt;/li&gt;
  &lt;li&gt;The developer works with the user (and outside teams if necessary) to resolve the issue.&lt;/li&gt;
  &lt;li&gt;The on-call developer knows that as a case of last-resort, they can involve their mentor (a developer peer) or lead to get the issue resolved.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With such an approach you decrease developer distraction and increase individual problem solving skills over time.&lt;/p&gt;

&lt;p&gt;There are some cultural presuppositions that need to be installed for this to work properly. Primarily, the developer on call needs to see a production incident as an individually assigned challenge — from which they can learn and be gratified for solving. Additionally, the developer on call needs to understand that they are providing value as they protect the team from distraction, meanwhile the team as a whole needs to cherish distraction-free focus time (aka “Deep Work”) as a means to applying their unique skillsets so that they can deliver value.&lt;/p&gt;

&lt;p&gt;Finally, the decision to bring another developer into a huddle needs to be understood as something undesirable but potentially necessary in a given instance. The developer on-call should set out thinking of pulling someone else in as a last resort, but the rest of the team should not think of this as an &lt;em&gt;ostrasizable&lt;/em&gt; offense. If the team is mature enough to work under these assumptions, the One-Hand approach yields the following benefits:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Protects the majority of the team from distraction&lt;/li&gt;
  &lt;li&gt;Removes the latent stress of the entire team watching a public channel, waiting for something bad to happen&lt;/li&gt;
  &lt;li&gt;Forces all team members to ‘level up’ the various skills needed for production support&lt;/li&gt;
  &lt;li&gt;Each developer who handles an incident will have increased confidence and know-how&lt;/li&gt;
  &lt;li&gt;Over time you decrease the amount of single-person dependencies the team has&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This approach goes hand-in-hand with the idea of Antifragility. A team needs to be strengthened by various stressors in its environment. A system needs ‘adaptive fault tolerance’ (See the &lt;a href=&quot;https://www.sciencedirect.com/science/article/pii/S1877050916302290&quot;&gt;Antifragile Software Manifesto&lt;/a&gt;). An individual needs to be tested and strengthened to a degree in order to become better (interestingly, Jonathan Haidt even &lt;a href=&quot;https://www.youtube.com/watch?v=tvb7R6GF6CU&quot;&gt;applies Antifragility&lt;/a&gt; to childhood development).&lt;/p&gt;

&lt;h2 id=&quot;in-sum&quot;&gt;In Sum&lt;/h2&gt;

&lt;p&gt;Yes, there might be some situations where the All-Hands approach is needed. If these instances are not rare on your team, something else is probably gravely wrong.&lt;/p&gt;

&lt;p&gt;Yes, the lead of the team or mentor will still be generally distracted as junior developers come to them with production incidents. This is the sad, lonely road  walked by the developer who chooses to mentor or take the lead on a team.&lt;/p&gt;

&lt;p&gt;Ultimately, the One-hand (by default) approach ends up delivering a more focused and capable team and a generally saner work environment.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Do you violently disagree me? Do you have a legendary story from that night you were on-call? Let me know in the comments.&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Mike Brinker</name>
          
          
        </author>
      

      
        <category term="Teams" />
      

      

      
        <summary type="html">Across the industry, as the teams trend away from being project-focused toward being product-focused, an increasing number of software developers find themselves being responsible for ‘support duties’. These responsibilities may include answering user questions, attempting to recreate reported bugs, and trying to recover from a system outage in production. There are reasons why it is good (this is the spirit of DevOps in my opinion) that developers will increasingly participate in these duties, but for teams that are taking these responsibilities on for the first time, confusion abounds.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">IDEs are dead. Long Live Development Environments. (Part 2)</title>
      
      
      <link href="https://software.themikejr.com/benefits-of-stepping-away-from-your-ide/" rel="alternate" type="text/html" title="IDEs are dead. Long Live Development Environments. (Part 2)" />
      
      <published>2019-01-12T00:00:00-05:00</published>
      <updated>2019-01-12T00:00:00-05:00</updated>
      <id>https://software.themikejr.com/benefits-of-stepping-away-from-your-ide</id>
      <content type="html" xml:base="https://software.themikejr.com/benefits-of-stepping-away-from-your-ide/">&lt;p&gt;If you haven’t yet, you may want to refer to &lt;a href=&quot;/step-away-from-your-ide/&quot;&gt;part 1 of this series&lt;/a&gt; where I present a reasoned argument against using an IDE. Now let me try to explain why it was so beneficial for me.&lt;/p&gt;

&lt;p&gt;I attribute major positive impacts to my professional competency as a developer to pulling away from my IDE and creating a development environment for myself. Below, I attempt categorize the positive impacts into 4 major groups.&lt;/p&gt;

&lt;h3 id=&quot;1-increased-competency-with-individual-tools&quot;&gt;1. Increased competency with individual tools&lt;/h3&gt;

&lt;p&gt;I first noticed that by using some tools directly, I began to understand them better than I did when I was using them through the abstraction of my IDE. Interacting with a tool on its terms (the interface that it provides) forces you to learn the concepts inherent with the tool rather than the way they have been abstracted away by your IDE.&lt;/p&gt;

&lt;p&gt;For example,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Git&lt;/strong&gt;. Git’s CLI is well known as being confusing and inconsistent. Many choose to use Git through their IDE of with applications like Tig, SourceTree, Kraken, etc… While these tools can be beneficial in specific use cases (I find no shame in relying on SourceTree or BitBucket for complicated diffs) they generally obfuscate the underlying concepts of Git. Learning to use Git’s CLI has allowed me to extract more value from this notoriously complicated tool.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Dependency Management&lt;/strong&gt; (NPM, Yarn, Bundler, Gradle) Using the command line interface for these tools rather than the menus in an IDE forced me to better understand the role that they play in the software development lifecycle. When I was a pure IDE user, I knew that in some cases I had to run a &lt;em&gt;gradle refresh&lt;/em&gt; or &lt;em&gt;gradle build&lt;/em&gt; but these were actually more like debugging steps when something went wrong in my local environment. After learning the tools individually and directly I better understood when I needed to use them.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2-improved-debugging-skills&quot;&gt;2. Improved debugging skills&lt;/h3&gt;

&lt;p&gt;I next noticed that when a production issue arose I had become much more comfortable with jumping on servers and getting to the bottom of an issue. When I was purely an IDE user, the thought of understanding how an application was running on in our target environment seemed much more foreign than the comfort of my Eclipse’s GUI. Working primarily in a terminal and interacting with tools via their CLI led me to be much more comfortable with ops-related tasks. It also helped me come to understand the OS I was using more thoroughly.&lt;/p&gt;

&lt;h3 id=&quot;3-becoming-a-technical-resource&quot;&gt;3. Becoming a technical resource&lt;/h3&gt;

&lt;p&gt;After I noticed my increased ability with individual tools and improved debugging skills in my day to day software development activities, a third interesting benefit began to manifest — people began to come to me when they had problems with an individial tool. This may seem like an obvious progression as you read this blog post, but as it was happening to me, I was not planning to become ‘the Git guy’ when I started using Git directly via its CLI but nonetheless from time to time coworkers would come to me with a problem and much to my surprise I was often able to help them.&lt;/p&gt;

&lt;h3 id=&quot;4-adaptability&quot;&gt;4. Adaptability&lt;/h3&gt;

&lt;p&gt;Finally, I noticed that when I switched development stacks, I was able to adapt easily to a new set of tools. Once I became somewhat ‘intimate’ with the tools in the first stack that I learned (Java based webapps) I then moved to a fullstack Javascript environment. I was a little nervous moving from Java to fullstack JS, but I found myself asking diagnostic questions based on tooling to get me through it. Rather than making a list of all the new tools I needed to learn to be a successful fullstack Javascript developer (and then researching them one by one), I was able to use the mental models I had of the tooling in my previous stack to gradually come to understand the new one. I would speak to myself like this:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Alright, I need to pull down the dependencies for my project. In the past I used Gradle for that. What do I have now? NPM. Great. Let’s see what the equivalent of &lt;code class=&quot;highlighter-rouge&quot;&gt;gradle build&lt;/code&gt; is for NPM.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;in-sum&quot;&gt;In Sum&lt;/h2&gt;

&lt;p&gt;In the end I was often pleasantly surprised to find that from stack to stack, smart people have developed tools that share similar roles and very often these tools even use similar terminology. (Moving from Yarn to Bundler for example required very little research)&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;So, are you sold on the benefits of ditching your IDE yet? Read my &lt;a href=&quot;/build-a-development-environment/&quot;&gt;step-by-step guide to getting rid of your IDE&lt;/a&gt;. Otherwise, let me know in the comments if you have found similar benefits.&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Mike Brinker</name>
          
          
        </author>
      

      
        <category term="Tools" />
      

      

      
        <summary type="html">If you haven’t yet, you may want to refer to part 1 of this series where I present a reasoned argument against using an IDE. Now let me try to explain why it was so beneficial for me.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">IDEs are dead. Long Live Development Environments. (Part 1)</title>
      
      
      <link href="https://software.themikejr.com/step-away-from-your-ide/" rel="alternate" type="text/html" title="IDEs are dead. Long Live Development Environments. (Part 1)" />
      
      <published>2019-01-05T00:00:00-05:00</published>
      <updated>2019-01-05T00:00:00-05:00</updated>
      <id>https://software.themikejr.com/step-away-from-your-ide</id>
      <content type="html" xml:base="https://software.themikejr.com/step-away-from-your-ide/">&lt;h2 id=&quot;preface&quot;&gt;Preface&lt;/h2&gt;

&lt;p&gt;Generally, I don’t think there are one-size-fits-all solutions in software development and engineering. I’m going to argue that it will be good for you to step away from your IDE because it was good for me to do so. If you totally disagree with me, that’s cool! Tell me your experience in the comments section.&lt;/p&gt;

&lt;h2 id=&quot;the-sacrifice-you-didnt-know-you-were-making&quot;&gt;The Sacrifice You Didn’t Know You Were Making&lt;/h2&gt;

&lt;p&gt;When it comes to being productive as a software developer there are many categories of personality that manifest regarding productivity. I speak from experience here, I’ve dabbled in nearly all of these. There are coffee addicts, nootropic pill-poppers, noise-cancelling headphone donners, binaural beat dweebs, flow-state seekers, text-editor worshippers, point-and-click mouse nuts, keyboard-only wingdings, the list goes on. I would like to take this moment to introduce what I consider a dangerous software developer personality, &lt;em&gt;the IDE indentured servant&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The IDE indentured servant is the person who relies on their trusty IDE as a prized productivity tool but doesn’t realize that it’s actually holding them back. Whatever gains they may have gotten in short-term productivity (which I believe is a &lt;em&gt;false&lt;/em&gt; productivity), they completely sacrifice when it comes to long-term productivity.&lt;/p&gt;

&lt;p&gt;I’m here to tell you today that &lt;em&gt;IDEs are a drain on your productivity&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Use an IDE if you want to stunt your software developer development.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Use an IDE if you want to be a &lt;em&gt;lesser&lt;/em&gt; developer.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Do I have your attention? Cool.&lt;/p&gt;

&lt;p&gt;Let’s go back to productivity for a second. Everyone knows a developer who’s measure of productivity is getting a feature deployed to a test environment so that they can start the next feature. These are the people who feel good about getting something ‘done’. These are also the people who usually forget to finish things in my experience. I have trouble with this myself actually. The gratification I get from ‘finishing’ something can lead me to prematurely move onto something else if I’m not careful. Let’s call this &lt;em&gt;short term productivity&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Conversely we have &lt;em&gt;long term productivity&lt;/em&gt;; finishing things that provide value and getting them right.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Slow is smooth and smooth is fast.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Measure twice and cut once.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There is truth to these aphorisms! (not least because Phil Dunphy champions the former). It’s the developer who desires long term productivity that needs to ditch her IDE.&lt;/p&gt;

&lt;h2 id=&quot;why-the-ide-hate&quot;&gt;Why the IDE hate?&lt;/h2&gt;

&lt;p&gt;Think about what an IDE actually does. The most charitable description would be that it ties together many tools and utilizes them to give instant feedback to the developer. This actually might be true, but there is one terrible side effect that most don’t consider: IDEs abstract the developer away from the very tools that they are using. This abstraction generates a distance between the developer and their tools. This distance may be helpful in the short term (imagine training wheels on a bike) but will only hurt in the long term (try riding your bike off road being dependent on training wheels).&lt;/p&gt;

&lt;p&gt;Don’t believe me?&lt;/p&gt;

&lt;p&gt;Consider this for a moment: &lt;em&gt;becoming competently productive with a particular IDE is orthogonal to being competently productive in a given language technology stack&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Learning how to use an IDE doesn’t actually teach you how to use the underlying tools that it ‘integrates’. Please join me in a short though experiment.&lt;/p&gt;

&lt;h3 id=&quot;the-junior-developer--git&quot;&gt;The Junior Developer + Git&lt;/h3&gt;

&lt;p&gt;Take version control for example. Imagine a junior developer who joins a team and begins their first project, which happens to be written in Ruby. For the sake of the experiment, imagine that they know nothing about Git. They reach for the RubyMine IDE from JetBrains. RubyMine has a fair amount of VCS tooling off the shelf that helps you do things with Git. There is some overlap between the terminology used by RubyMine’s VCS features and the Git CLI, but it’s not 100%.&lt;/p&gt;

&lt;p&gt;So the junior dev works on this project for 6 months.  They’ve been using the RubyMine VCS tools to commit and push their changes. At the end of 6 months, how much have they learned about Git?&lt;/p&gt;

&lt;p&gt;I think we all know the answer. They have learned &lt;em&gt;very little&lt;/em&gt; about Git. They have probably memorized the menu items or keyboard shortcuts that are needed to commit and push to a branch, but they probably aren’t aware of the differences between the Git index, staged files, and committed files for example.&lt;/p&gt;

&lt;p&gt;I’m not saying it’s logically necessary for a developer to know the internals of Git to be successful. Being a software developer is about providing value to the people that we are making the software for. You don’t have to be a Git ninja to provide value. However, There will be a point though when the developer who doesn’t know Git very well will likely lose some of their work, blow away a remote branch accidentally, or get very confused when someone asks them to “Cherry pick” a commit. In this moment who is the person that every one turns to? It’s the guy who always uses the Git CLI.&lt;/p&gt;

&lt;h3 id=&quot;some-personal-experience&quot;&gt;Some Personal Experience&lt;/h3&gt;

&lt;p&gt;My first project was in Java and we used CVS (shudder) for version control. I used the CVS tooling built into Eclipse every time I pushed, pulled, compared, etc… just like the rest of my team. There was one time where something went horribly wrong with the CVS repo on our CVS server. You know who my team needed help from to get it fixed? The token Emacs user that sat near us. He had been using the CVS CLI all along. He made quick work of the problem that we had. It was trivial enough for him to fix  that none of us ever understood what the problem was.&lt;/p&gt;

&lt;p&gt;I humbly suggest that this will happen not only with VCS tools but dependency management tools, interpreters, compilers, application servers, linters, code coverage tools, and build tooling.&lt;/p&gt;

&lt;h2 id=&quot;in-sum&quot;&gt;In Sum&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;In order to integrate developer tools into a single environment, IDEs abstract tooling away which has the unfortunate side effect of obscuring the developer from their tooling&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;It is my contention that this may be good for short-term productivity, but is almost certainly bad for long-term productivity.&lt;/p&gt;

&lt;p&gt;Take a look at &lt;a href=&quot;/benefits-of-stepping-away-from-your-ide/&quot;&gt;part 2 of this series&lt;/a&gt; to understand why stepping way from an IDE was so beneficial to me.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Do you completely disagree with me? Excellent! Please let me know in the comments.&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Mike Brinker</name>
          
          
        </author>
      

      
        <category term="Tools" />
      

      

      
        <summary type="html">Preface</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">How does DNS work?</title>
      
      
      <link href="https://software.themikejr.com/how-does-dns-work/" rel="alternate" type="text/html" title="How does DNS work?" />
      
      <published>2018-12-27T00:00:00-05:00</published>
      <updated>2018-12-27T00:00:00-05:00</updated>
      <id>https://software.themikejr.com/how-does-dns-work</id>
      <content type="html" xml:base="https://software.themikejr.com/how-does-dns-work/">&lt;p&gt;Whether you realize it or not, DNS is a workhorse of the internet ecosystem. It provides the glue that allows someone like your grandma, (who knows that you want a pair of Adidas Ultraboost from footlocker.com for Christmas) to talk TCP with a server on the other side of the world.&lt;/p&gt;

&lt;p&gt;It’s amazing when you think about it…&lt;/p&gt;

&lt;p&gt;Your grandma really is quite kind.&lt;/p&gt;

&lt;p&gt;So, let’s start from first principles and dig in to understand DNS a bit more.&lt;/p&gt;

&lt;h2 id=&quot;what-exactly-is-dns&quot;&gt;What exactly is DNS?&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;DNS, or the &lt;em&gt;Domain Name System&lt;/em&gt; is an abstraction layer that maps the human-readable web addresses that we know and love to IP addresses.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For a long time, that was about the extent of my knowledge of DNS. I knew that there were servers out in the ether of the internet that contained those mappings.  Later on, I learned that one could use &lt;code class=&quot;highlighter-rouge&quot;&gt;nslookup&lt;/code&gt; to find existing mappings. Beyond that, I knew very little. The majority of the time this was enough, but every now and then I would hear someone mention an &lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt; record or a &lt;code class=&quot;highlighter-rouge&quot;&gt;CNAME&lt;/code&gt; record and I couldn’t contribute much to the conversation other than “Ah yes, that has something to do with DNS”.  If you are like me, the things that you know that you don’t know serve as bread crumbs for the things that you want to learn.  Let’s follow those breadcrumbs a bit.&lt;/p&gt;

&lt;h2 id=&quot;the-lifecycle-of-a-dns-query&quot;&gt;The lifecycle of a DNS query&lt;/h2&gt;

&lt;p&gt;Interview questions like “Tell me everything that happens when I navigate to google.com” are quite fun to answer for me.  This is mainly because there are endless ways to tell the story of all the things that go on when a user does x.  At some point though, we have to limit the detail of our explanations in order to actually provide value. Be forewarned: the explanatory lifecycle of a DNS query below is not exhaustive! Exhaustive references can be useful but not so much in didactic contexts.&lt;/p&gt;

&lt;p&gt;So what happens when a domain name query is issued to DNS?&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Someone named Jeffrey asks their computer to go to google.com&lt;/li&gt;
  &lt;li&gt;The operating system of Jeffrey’s computer consults its own cache to see if the IP address for the requested name is already known. If it is, life is good! If not…&lt;/li&gt;
  &lt;li&gt;Jeffrey’s operating system reaches out to a DNS cacher/recursor which we will refer to as the &lt;em&gt;local DNS server&lt;/em&gt; from here onward. The local DNS server is very often provided by your ISP, but sufficiently advanced LANs will often have their own local DNS server.&lt;/li&gt;
  &lt;li&gt;The &lt;em&gt;local DNS server&lt;/em&gt; will check its cache. If it has an answer to the query, life is good! If not…&lt;/li&gt;
  &lt;li&gt;The local DNS server will recursively contact other DNS servers until it can provide an authoritative answer.  The recursive DNS request looks something like:
    &lt;ul&gt;
      &lt;li&gt;Local DNS server asks a root DNS server where to find the .com TLD (top level domain) server. The root DNS server provides the answer.&lt;/li&gt;
      &lt;li&gt;Local DNS server then asks the .com TLD DNS server for the “google” name server. The .com TLD DNS server provides the answer.&lt;/li&gt;
      &lt;li&gt;Local DNS server asks the “google” DNS server for the google.com IP. The “google” name server provides an answer.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The local DNS server returns the IP address provided by the “google” name server to Jeffrey’s computer. (and hopefully caches the answer!)&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;what-is-a-dns-record&quot;&gt;What is a DNS record?&lt;/h2&gt;

&lt;p&gt;The response provided by a DNS server represents a &lt;em&gt;record&lt;/em&gt; that exists in the Domain Name System. One might find that the responses representing records are referred to as a &lt;em&gt;record&lt;/em&gt; themselves. YMMV.&lt;/p&gt;

&lt;p&gt;Below I explain a few of the common DNS record types. There are many more. For more details you may want to consult this &lt;a href=&quot;https://en.wikipedia.org/wiki/List_of_DNS_record_types&quot;&gt;helpful and complete list&lt;/a&gt; of DNS record types.&lt;/p&gt;

&lt;h3 id=&quot;cname-records&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CNAME&lt;/code&gt; Records&lt;/h3&gt;

&lt;p&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;CNAME&lt;/code&gt; record is said to be “the canonical name for an alias” in &lt;a href=&quot;https://tools.ietf.org/html/rfc1035&quot;&gt;RFC 1035&lt;/a&gt;.  &lt;code class=&quot;highlighter-rouge&quot;&gt;CNAME&lt;/code&gt; records map an alias to another name. Upon receiving a &lt;code class=&quot;highlighter-rouge&quot;&gt;CNAME&lt;/code&gt; response, the  computer issuing a DNS query will restart the query using the value that the &lt;code class=&quot;highlighter-rouge&quot;&gt;CNAME&lt;/code&gt; record points too. Note: While DNS is actually resolving the IP of the canonical name, the original name request (the alias) is what users will see in their browser.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CNAME&lt;/code&gt; records are intended to point to a canonical name, but there is nothing that prevents one from creating a CNAME record that point to another alias. One could even create an infinite loop if they so desired.&lt;/p&gt;

&lt;h3 id=&quot;dname-records&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DNAME&lt;/code&gt; Records&lt;/h3&gt;

&lt;p&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;DNAME&lt;/code&gt; record “provides redirection for a subtree of the domain” accord to its RFC (&lt;a href=&quot;https://tools.ietf.org/html/rfc6672&quot;&gt;RFC 6672&lt;/a&gt;). For this reason is it known as a &lt;em&gt;delegation&lt;/em&gt; record.&lt;/p&gt;

&lt;h3 id=&quot;a--records&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt;  Records&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt; records are described as providing “a host address” in &lt;a href=&quot;https://tools.ietf.org/html/rfc1035&quot;&gt;RFC 1035&lt;/a&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt; records are the meat and potatoes(?) of DNS. The provide a simple mapping from a name to an IP address.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Did I get something wrong? Is there another subset of DNS functionality that needs to be explained? Let me know in the comments.&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Mike Brinker</name>
          
          
        </author>
      

      
        <category term="How Things Work" />
      

      

      
        <summary type="html">Whether you realize it or not, DNS is a workhorse of the internet ecosystem. It provides the glue that allows someone like your grandma, (who knows that you want a pair of Adidas Ultraboost from footlocker.com for Christmas) to talk TCP with a server on the other side of the world.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">The Bad Plus</title>
      
      
      <link href="https://software.themikejr.com/bad-plus/" rel="alternate" type="text/html" title="The Bad Plus" />
      
      <published>2018-12-08T00:00:00-05:00</published>
      <updated>2018-12-08T00:00:00-05:00</updated>
      <id>https://software.themikejr.com/bad-plus</id>
      <content type="html" xml:base="https://software.themikejr.com/bad-plus/">&lt;p&gt;I’ve found over the years that there is some music that is well-suited for listening while doing software-development related work and some music is not. Rather than try to derive a special formula for “coding music” I’m going to tell you about some music that works for me. One group I’ve been listening to for awhile that works particularly well is &lt;em&gt;The Bad Plus&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The Bad Plus&lt;/em&gt; is a jazz piano trio that might not sound like a jazz group to you at first blush. They employ jazz idioms and instrumentation on popular cover tunes and their own originals as well. I find a wide range of mood and tone in their music: calm and nearly ambient, cacophonic excitement, and even straight ahead tunes with lots of energy. Despite the diversity it all works nicely when I’m clacking away on the keyboard.&lt;/p&gt;

&lt;p&gt;I highly recommend catching them live if they are ever playing in your town. The occasions I’m which I had the priviledge of hearing The Bad Plus did not disappoint – YouTube has a nice selection of live recordings available. One can only hope they release more live music in the future.&lt;/p&gt;

&lt;h2 id=&quot;song-selection-for-work&quot;&gt;Song Selection for Work&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Anthem for the Earnest&lt;/li&gt;
  &lt;li&gt;Flim&lt;/li&gt;
  &lt;li&gt;As the Moment Slips Away&lt;/li&gt;
  &lt;li&gt;Beauty Has It Hard&lt;/li&gt;
  &lt;li&gt;We are the Champions&lt;/li&gt;
  &lt;li&gt;Forces&lt;/li&gt;
  &lt;li&gt;Prehensile Dream&lt;/li&gt;
  &lt;li&gt;Silence is the Question&lt;/li&gt;
  &lt;li&gt;1983 Regional All-Star&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=cQNybpWVS3o&quot;&gt;Newport Jazz Festival, 2006&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=11YQwpNM1ng&quot;&gt;Moers Festival, 2017&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Mike Brinker</name>
          
          
        </author>
      

      
        <category term="Music I Listen To While Working" />
      

      

      
        <summary type="html">I’ve found over the years that there is some music that is well-suited for listening while doing software-development related work and some music is not. Rather than try to derive a special formula for “coding music” I’m going to tell you about some music that works for me. One group I’ve been listening to for awhile that works particularly well is The Bad Plus.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">The Serverless Sea Change</title>
      
      
      <link href="https://software.themikejr.com/the-serverless-sea-change/" rel="alternate" type="text/html" title="The Serverless Sea Change" />
      
      <published>2018-12-07T00:00:00-05:00</published>
      <updated>2018-12-07T00:00:00-05:00</updated>
      <id>https://software.themikejr.com/the-serverless-sea-change</id>
      <content type="html" xml:base="https://software.themikejr.com/the-serverless-sea-change/">&lt;p&gt;I read a great article at InfoQ this week called &lt;a href=&quot;https://www.infoq.com/articles/serverless-sea-change&quot;&gt;&lt;em&gt;The Serverless Sea Change&lt;/em&gt;&lt;/a&gt;. Generally, the argument made is that code leads to technical debt, therefore the solution with the least amount of code wins. For example:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you are building a Serviceful Serverless application, you will need to spend significantly more time on research than you would with an application where you will write everything. This is because you will be implementing much more functionality of the application on services, and you need to verify that you are selecting the correct service. You also need to figure out the right way to integrate the service with your application. So instead of spending an hour or two looking for packages you might leverage, you should think about spending days and even weeks writing proof-of-concept code and testing different options.&lt;/p&gt;

  &lt;p&gt;Another way to say this is in two equations:&lt;/p&gt;

  &lt;p&gt;2 Weeks Research + 1 Day Development → N Lines of Code to Maintain&lt;/p&gt;

  &lt;p&gt;1 Day Research + 2 Weeks Development → 10 ⋅ N Lines of Code to Maintain&lt;/p&gt;

  &lt;p&gt;On average, ten times more lines of code is ten times more technical debt, which means increasingly slower and less predictable future development velocity, and systems that cannot be well maintained by the average developer.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I’ve generally remained skeptical as to whether the advantages of serverless architectures outweigh the benefits, or to put it another way, if there are any advantages when all is sasaid and done. For me, the looming issues are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Vendor Lock-in&lt;/li&gt;
  &lt;li&gt;Conversely, the portability of any artifact targeting a FaaS platform&lt;/li&gt;
  &lt;li&gt;The amount of glue needed to make serverless work (any AWS Lambda demo I’ve seen spends more time gluing AWS services together than it does writing code)&lt;/li&gt;
  &lt;li&gt;In the case of AWS, many of the glue services are still beta products&lt;/li&gt;
  &lt;li&gt;Ease of local development&lt;/li&gt;
  &lt;li&gt;The &lt;em&gt;Cold Starts&lt;/em&gt; problem&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I remain skeptical, but this article does a great job of explaining and arguing for the benefits. Also, perhaps I am wrong (!) and we are a few years away from a true “Serverless Sea Change”.&lt;/p&gt;

&lt;p&gt;Be sure to check out the whole article over at &lt;a href=&quot;https://www.infoq.com/articles/serverless-sea-change&quot;&gt;InfoQ&lt;/a&gt;.&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Mike Brinker</name>
          
          
        </author>
      

      
        <category term="What I've Been Reading" />
      

      

      
        <summary type="html">I read a great article at InfoQ this week called The Serverless Sea Change. Generally, the argument made is that code leads to technical debt, therefore the solution with the least amount of code wins. For example:</summary>
      

      
      
    </entry>
  
  
</feed>
