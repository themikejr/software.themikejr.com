<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <generator uri="http://jekyllrb.com" version="3.8.5">Jekyll</generator>
  
  
  <link href="https://software.themikejr.com/feed.xml" rel="self" type="application/atom+xml" />
  <link href="https://software.themikejr.com/" rel="alternate" type="text/html" />
  <updated>2019-01-26T09:47:58-05:00</updated>
  <id>https://software.themikejr.com//</id>

  
    <title type="html">Mike Brinker on Software Development</title>
  

  
    <subtitle>Thoughts, opinions, proposals, and lessons-learned from the mind of a Software Developer.</subtitle>
  

  
    <author>
        <name>Mike Brinker</name>
      
      
    </author>
  

  
  
    <entry>
      
      <title type="html">The One-Hand Approach to Production Support</title>
      
      
      <link href="https://software.themikejr.com/one-hand-approach-to-production-support/" rel="alternate" type="text/html" title="The One-Hand Approach to Production Support" />
      
      <published>2019-01-26T00:00:00-05:00</published>
      <updated>2019-01-26T00:00:00-05:00</updated>
      <id>https://software.themikejr.com/one-hand-approach-to-production-support</id>
      <content type="html" xml:base="https://software.themikejr.com/one-hand-approach-to-production-support/">&lt;p&gt;Across the industry, as the teams trend away from being project-focused toward being product-focused, an increasing number of software developers find themselves being responsible for ‘support duties’. These responsibilities may include answering user questions, attempting to recreate reported bugs, and trying to recover from a system outage in production. There are reasons why it is good (this is the spirit of &lt;em&gt;DevOps&lt;/em&gt; in my opinion) that developers will increasingly participate in these duties, but for teams that are taking these responsibilities on for the first time, confusion abounds.&lt;/p&gt;

&lt;h2 id=&quot;assumptions&quot;&gt;Assumptions&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Production incidents &lt;em&gt;will&lt;/em&gt; happen&lt;/li&gt;
  &lt;li&gt;It is in the best interest of the team and product for developers to become skilled at handing production incidents&lt;/li&gt;
  &lt;li&gt;We should aspire to &lt;a href=&quot;https://en.wikipedia.org/wiki/Antifragility&quot;&gt;Antifragility&lt;/a&gt; in our systems, our teams, and as individuals.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-all-hands-by-default-approach&quot;&gt;The All-Hands by Default Approach&lt;/h2&gt;

&lt;p&gt;To my surprise I have seen managers and developers who prefer an unorganized, all-hands approach to production support. Typically, a scenario will play out like this:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Production incident is reported to some sort of channel that is ‘public’ to all developers&lt;/li&gt;
  &lt;li&gt;Since there is not a dedicated person to handle all issues for this given time frame, a manager type will soon be contacting developers to find out who is working on the issue.&lt;/li&gt;
  &lt;li&gt;Meanwhile, a developer notices the problem and immediately notifies his/her peers&lt;/li&gt;
  &lt;li&gt;Physical or virtual huddle happens and ‘all hands’ are on deck for fixing the issue&lt;/li&gt;
  &lt;li&gt;Typically developers that have more experience with the system (or perhaps have more mature skill sets) lead the troubleshooting until a solution is found&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I suppose developers and managers might prefer this approach for the following reasons:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Having a huddle creates an atmosphere or appearance of productivity and progress&lt;/li&gt;
  &lt;li&gt;When all developers are in the huddle, each can suggest solutions or hypotheses that are unique to their skillset and experience (seemingly shortening the time that it takes to solve the problem)&lt;/li&gt;
  &lt;li&gt;From a developer’s point of view, this approach may provide more &lt;em&gt;psychological safety&lt;/em&gt; since they aren’t the only one working on an issue&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;problems-of-the-all-hands-approach&quot;&gt;Problems of the All-Hands Approach&lt;/h2&gt;

&lt;p&gt;There are hidden costs to the all-hands approach.&lt;/p&gt;

&lt;p&gt;First, it may seem like having a support incident channel that is public to all developers is a good idea, but I think what most managers don’t realize is the amount of distraction that channels such as these create. If a developer is told that part of their job responsibility is to monitor logged incidents, their concentration is going to be almost &lt;a href=&quot;http://calnewport.com/blog/2016/09/06/a-productivity-lesson-from-a-classic-arcade-game/&quot;&gt;permanently compromised&lt;/a&gt; to some degree. One extreme example I recently heard was a developer, who faced with the responsibilities of supporting an application, opened up the application logs &lt;em&gt;every morning&lt;/em&gt; and had them visible on her screen for the entire day. If something went wrong with the application, she claimed to be able to detect a change in the shape of the text that was flowing on the screen. Imagine if this person’s manager understood that this person was compromising their concentration nearly 100% of the time to visually monitor application logs!&lt;/p&gt;

&lt;p&gt;Less extreme situations still are quite a drain on a developer’s ability to focus. If you are not convinced of this I suggest taking a look at &lt;a href=&quot;http://calnewport.com/books/deep-work/&quot;&gt;Deep Work&lt;/a&gt; by Cal Newport (decent summary &lt;a href=&quot;https://fastertomaster.com/deep-work-by-cal-newport/&quot;&gt;here&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;In addition to a near constant compromising of developer focus, consider the sheer &lt;em&gt;cost&lt;/em&gt; of involving everyone on the team in each production incident. As I mentioned in point number five of the &lt;em&gt;All Hands&lt;/em&gt; approach, it has often been my observation that despite all hands being present, a single developer usually ends up leading the charge at finding a solution and applying it. Given this, it is especially egregious to think that all of the members are pulled into a huddle for the incident when a subset of them will actually be contributing meaningfully to the solution.&lt;/p&gt;

&lt;h2 id=&quot;the-one-hand-by-default-approach&quot;&gt;The One-Hand (by Default) Approach&lt;/h2&gt;

&lt;p&gt;What if I could suggest an approach to handling production support that decreased distraction to the team and fostered improvement of skills and self-confidence for individual developers? That’s exactly what the &lt;em&gt;One-Hand&lt;/em&gt; approach is. It goes something like this:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Notifications of production incidents are fed to a developer who is ‘on call’ for the given time period (let’s say they are on call for the current week). Developers who are not on call are expected to continue with their normal work.&lt;/li&gt;
  &lt;li&gt;The developer works with the user (and outside teams if necessary) to resolve the issue.&lt;/li&gt;
  &lt;li&gt;The on-call developer knows that as a case of last-resort, they can involve their mentor (a developer peer) or lead to get the issue resolved.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With such an approach you decrease developer distraction and increase individual problem solving skills over time.&lt;/p&gt;

&lt;p&gt;There are some cultural presuppositions that need to be installed for this to work properly. Primarily, the developer on call needs to see a production incident as an individually assigned challenge — from which they can learn and be gratified for solving. Additionally, the developer on call needs to understand that they are providing value as they protect the team from distraction, meanwhile the team as a whole needs to cherish distraction-free focus time (aka “Deep Work”) as a means to applying their unique skillsets so that they can deliver value.&lt;/p&gt;

&lt;p&gt;Finally, the decision to bring another developer into a huddle needs to be understood as something undesirable but potentially necessary in a given instance. The developer on-call should set out thinking of pulling someone else in as a last resort, but the rest of the team should not think of this as an &lt;em&gt;ostrasizable&lt;/em&gt; offense. If the team is mature enough to work under these assumptions, the One-Hand approach yields the following benefits:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Protects the majority of the team from distraction&lt;/li&gt;
  &lt;li&gt;Removes the latent stress of the entire team watching a public channel, waiting for something bad to happen&lt;/li&gt;
  &lt;li&gt;Forces all team members to ‘level up’ the various skills needed for production support&lt;/li&gt;
  &lt;li&gt;Each developer who handles an incident will have increased confidence and know-how&lt;/li&gt;
  &lt;li&gt;Over time you decrease the amount of single-person dependencies the team has&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This approach goes hand-in-hand with the idea of Antifragility. A team needs to be strengthened by various stressors in its environment. A system needs ‘adaptive fault tolerance’ (See the &lt;a href=&quot;https://www.sciencedirect.com/science/article/pii/S1877050916302290&quot;&gt;Antifragile Software Manifesto&lt;/a&gt;). An individual needs to be tested and strengthened to a degree in order to become better (interestingly, Jonathan Haidt even &lt;a href=&quot;https://www.youtube.com/watch?v=tvb7R6GF6CU&quot;&gt;applies Antifragility&lt;/a&gt; to childhood development).&lt;/p&gt;

&lt;h2 id=&quot;in-sum&quot;&gt;In Sum&lt;/h2&gt;

&lt;p&gt;Yes, there might be some situations where the All-Hands approach is needed. If these instances are not rare on your team, something else is probably gravely wrong.&lt;/p&gt;

&lt;p&gt;Yes, the lead of the team or mentor will still be generally distracted as junior developers come to them with production incidents. This is the sad, lonely road  walked by the developer who chooses to mentor or take the lead on a team.&lt;/p&gt;

&lt;p&gt;Ultimately, the One-hand (by default) approach ends up delivering a more focused and capable team and a generally saner work environment.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Do you violently disagree me? Do you have a legendary story from that night you were on-call? Let me know in the comments.&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Mike Brinker</name>
          
          
        </author>
      

      
        <category term="Teams" />
      

      

      
        <summary type="html">Across the industry, as the teams trend away from being project-focused toward being product-focused, an increasing number of software developers find themselves being responsible for ‘support duties’. These responsibilities may include answering user questions, attempting to recreate reported bugs, and trying to recover from a system outage in production. There are reasons why it is good (this is the spirit of DevOps in my opinion) that developers will increasingly participate in these duties, but for teams that are taking these responsibilities on for the first time, confusion abounds.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">IDEs are dead. Long Live Development Environments. (Part 2)</title>
      
      
      <link href="https://software.themikejr.com/benefits-of-stepping-away-from-your-ide/" rel="alternate" type="text/html" title="IDEs are dead. Long Live Development Environments. (Part 2)" />
      
      <published>2019-01-12T00:00:00-05:00</published>
      <updated>2019-01-12T00:00:00-05:00</updated>
      <id>https://software.themikejr.com/benefits-of-stepping-away-from-your-ide</id>
      <content type="html" xml:base="https://software.themikejr.com/benefits-of-stepping-away-from-your-ide/">&lt;p&gt;If you haven’t yet, you may want to refer to &lt;a href=&quot;/step-away-from-your-ide/&quot;&gt;part 1 of this series&lt;/a&gt; where I present a reasoned argument against using an IDE. Now let me try to explain why it was so beneficial for me.&lt;/p&gt;

&lt;p&gt;I attribute major positive impacts to my professional competency as a developer to pulling away from my IDE and creating a development environment for myself. Below, I attempt categorize the positive impacts into 4 major groups.&lt;/p&gt;

&lt;h3 id=&quot;1-increased-competency-with-individual-tools&quot;&gt;1. Increased competency with individual tools&lt;/h3&gt;

&lt;p&gt;I first noticed that by using some tools directly, I began to understand them better than I did when I was using them through the abstraction of my IDE. Interacting with a tool on its terms (the interface that it provides) forces you to learn the concepts inherent with the tool rather than the way they have been abstracted away by your IDE.&lt;/p&gt;

&lt;p&gt;For example,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Git&lt;/strong&gt;. Git’s CLI is well known as being confusing and inconsistent. Many choose to use Git through their IDE of with applications like Tig, SourceTree, Kraken, etc… While these tools can be beneficial in specific use cases (I find no shame in relying on SourceTree or BitBucket for complicated diffs) they generally obfuscate the underlying concepts of Git. Learning to use Git’s CLI has allowed me to extract more value from this notoriously complicated tool.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Dependency Management&lt;/strong&gt; (NPM, Yarn, Bundler, Gradle) Using the command line interface for these tools rather than the menus in an IDE forced me to better understand the role that they play in the software development lifecycle. When I was a pure IDE user, I knew that in some cases I had to run a &lt;em&gt;gradle refresh&lt;/em&gt; or &lt;em&gt;gradle build&lt;/em&gt; but these were actually more like debugging steps when something went wrong in my local environment. After learning the tools individually and directly I better understood when I needed to use them.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2-improved-debugging-skills&quot;&gt;2. Improved debugging skills&lt;/h3&gt;

&lt;p&gt;I next noticed that when a production issue arose I had become much more comfortable with jumping on servers and getting to the bottom of an issue. When I was purely an IDE user, the thought of understanding how an application was running on in our target environment seemed much more foreign than the comfort of my Eclipse’s GUI. Working primarily in a terminal and interacting with tools via their CLI led me to be much more comfortable with ops-related tasks. It also helped me come to understand the OS I was using more thoroughly.&lt;/p&gt;

&lt;h3 id=&quot;3-becoming-a-technical-resource&quot;&gt;3. Becoming a technical resource&lt;/h3&gt;

&lt;p&gt;After I noticed my increased ability with individual tools and improved debugging skills in my day to day software development activities, a third interesting benefit began to manifest — people began to come to me when they had problems with an individial tool. This may seem like an obvious progression as you read this blog post, but as it was happening to me, I was not planning to become ‘the Git guy’ when I started using Git directly via its CLI but nonetheless from time to time coworkers would come to me with a problem and much to my surprise I was often able to help them.&lt;/p&gt;

&lt;h3 id=&quot;4-adaptability&quot;&gt;4. Adaptability&lt;/h3&gt;

&lt;p&gt;Finally, I noticed that when I switched development stacks, I was able to adapt easily to a new set of tools. Once I became somewhat ‘intimate’ with the tools in the first stack that I learned (Java based webapps) I then moved to a fullstack Javascript environment. I was a little nervous moving from Java to fullstack JS, but I found myself asking diagnostic questions based on tooling to get me through it. Rather than making a list of all the new tools I needed to learn to be a successful fullstack Javascript developer (and then researching them one by one), I was able to use the mental models I had of the tooling in my previous stack to gradually come to understand the new one. I would speak to myself like this:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Alright, I need to pull down the dependencies for my project. In the past I used Gradle for that. What do I have now? NPM. Great. Let’s see what the equivalent of &lt;code class=&quot;highlighter-rouge&quot;&gt;gradle build&lt;/code&gt; is for NPM.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;in-sum&quot;&gt;In Sum&lt;/h2&gt;

&lt;p&gt;In the end I was often pleasantly surprised to find that from stack to stack, smart people have developed tools that share similar roles and very often these tools even use similar terminology. (Moving from Yarn to Bundler for example required very little research)&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;So, are you sold on the benefits of ditching your IDE yet? If so, come back soon for the last post in this series where I give the practical steps that I followed to step away from my IDE. In the meantime, let me know in the comments if you have found similar benefits.&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Mike Brinker</name>
          
          
        </author>
      

      
        <category term="Tools" />
      

      

      
        <summary type="html">If you haven’t yet, you may want to refer to part 1 of this series where I present a reasoned argument against using an IDE. Now let me try to explain why it was so beneficial for me.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">IDEs are dead. Long Live Development Environments. (Part 1)</title>
      
      
      <link href="https://software.themikejr.com/step-away-from-your-ide/" rel="alternate" type="text/html" title="IDEs are dead. Long Live Development Environments. (Part 1)" />
      
      <published>2019-01-05T00:00:00-05:00</published>
      <updated>2019-01-05T00:00:00-05:00</updated>
      <id>https://software.themikejr.com/step-away-from-your-ide</id>
      <content type="html" xml:base="https://software.themikejr.com/step-away-from-your-ide/">&lt;h2 id=&quot;preface&quot;&gt;Preface&lt;/h2&gt;

&lt;p&gt;Generally, I don’t think there are one-size-fits-all solutions in software development and engineering. I’m going to argue that it will be good for you to step away from your IDE because it was good for me to do so. If you totally disagree with me, that’s cool! Tell me your experience in the comments section.&lt;/p&gt;

&lt;h2 id=&quot;the-sacrifice-you-didnt-know-you-were-making&quot;&gt;The Sacrifice You Didn’t Know You Were Making&lt;/h2&gt;

&lt;p&gt;When it comes to being productive as a software developer there are many categories of personality that manifest regarding productivity. I speak from experience here, I’ve dabbled in nearly all of these. There are coffee addicts, nootropic pill-poppers, noise-cancelling headphone donners, binaural beat dweebs, flow-state seekers, text-editor worshippers, point-and-click mouse nuts, keyboard-only wingdings, the list goes on. I would like to take this moment to introduce what I consider a dangerous software developer personality, &lt;em&gt;the IDE indentured servant&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The IDE indentured servant is the person who relies on their trusty IDE as a prized productivity tool but doesn’t realize that it’s actually holding them back. Whatever gains they may have gotten in short-term productivity (which I believe is a &lt;em&gt;false&lt;/em&gt; productivity), they completely sacrifice when it comes to long-term productivity.&lt;/p&gt;

&lt;p&gt;I’m here to tell you today that &lt;em&gt;IDEs are a drain on your productivity&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Use an IDE if you want to stunt your software developer development.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Use an IDE if you want to be a &lt;em&gt;lesser&lt;/em&gt; developer.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Do I have your attention? Cool.&lt;/p&gt;

&lt;p&gt;Let’s go back to productivity for a second. Everyone knows a developer who’s measure of productivity is getting a feature deployed to a test environment so that they can start the next feature. These are the people who feel good about getting something ‘done’. These are also the people who usually forget to finish things in my experience. I have trouble with this myself actually. The gratification I get from ‘finishing’ something can lead me to prematurely move onto something else if I’m not careful. Let’s call this &lt;em&gt;short term productivity&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Conversely we have &lt;em&gt;long term productivity&lt;/em&gt;; finishing things that provide value and getting them right.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Slow is smooth and smooth is fast.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Measure twice and cut once.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There is truth to these aphorisms! (not least because Phil Dunphy champions the former). It’s the developer who desires long term productivity that needs to ditch her IDE.&lt;/p&gt;

&lt;h2 id=&quot;why-the-ide-hate&quot;&gt;Why the IDE hate?&lt;/h2&gt;

&lt;p&gt;Think about what an IDE actually does. The most charitable description would be that it ties together many tools and utilizes them to give instant feedback to the developer. This actually might be true, but there is one terrible side effect that most don’t consider: IDEs abstract the developer away from the very tools that they are using. This abstraction generates a distance between the developer and their tools. This distance may be helpful in the short term (imagine training wheels on a bike) but will only hurt in the long term (try riding your bike off road being dependent on training wheels).&lt;/p&gt;

&lt;p&gt;Don’t believe me?&lt;/p&gt;

&lt;p&gt;Consider this for a moment: &lt;em&gt;becoming competently productive with a particular IDE is orthogonal to being competently productive in a given language technology stack&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Learning how to use an IDE doesn’t actually teach you how to use the underlying tools that it ‘integrates’. Please join me in a short though experiment.&lt;/p&gt;

&lt;h3 id=&quot;the-junior-developer--git&quot;&gt;The Junior Developer + Git&lt;/h3&gt;

&lt;p&gt;Take version control for example. Imagine a junior developer who joins a team and begins their first project, which happens to be written in Ruby. For the sake of the experiment, imagine that they know nothing about Git. They reach for the RubyMine IDE from JetBrains. RubyMine has a fair amount of VCS tooling off the shelf that helps you do things with Git. There is some overlap between the terminology used by RubyMine’s VCS features and the Git CLI, but it’s not 100%.&lt;/p&gt;

&lt;p&gt;So the junior dev works on this project for 6 months.  They’ve been using the RubyMine VCS tools to commit and push their changes. At the end of 6 months, how much have they learned about Git?&lt;/p&gt;

&lt;p&gt;I think we all know the answer. They have learned &lt;em&gt;very little&lt;/em&gt; about Git. They have probably memorized the menu items or keyboard shortcuts that are needed to commit and push to a branch, but they probably aren’t aware of the differences between the Git index, staged files, and committed files for example.&lt;/p&gt;

&lt;p&gt;I’m not saying it’s logically necessary for a developer to know the internals of Git to be successful. Being a software developer is about providing value to the people that we are making the software for. You don’t have to be a Git ninja to provide value. However, There will be a point though when the developer who doesn’t know Git very well will likely lose some of their work, blow away a remote branch accidentally, or get very confused when someone asks them to “Cherry pick” a commit. In this moment who is the person that every one turns to? It’s the guy who always uses the Git CLI.&lt;/p&gt;

&lt;h3 id=&quot;some-personal-experience&quot;&gt;Some Personal Experience&lt;/h3&gt;

&lt;p&gt;My first project was in Java and we used CVS (shudder) for version control. I used the CVS tooling built into Eclipse every time I pushed, pulled, compared, etc… just like the rest of my team. There was one time where something went horribly wrong with the CVS repo on our CVS server. You know who my team needed help from to get it fixed? The token Emacs user that sat near us. He had been using the CVS CLI all along. He made quick work of the problem that we had. It was trivial enough for him to fix  that none of us ever understood what the problem was.&lt;/p&gt;

&lt;p&gt;I humbly suggest that this will happen not only with VCS tools but dependency management tools, interpreters, compilers, application servers, linters, code coverage tools, and build tooling.&lt;/p&gt;

&lt;h2 id=&quot;in-sum&quot;&gt;In Sum&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;In order to integrate developer tools into a single environment, IDEs abstract tooling away which has the unfortunate side effect of obscuring the developer from their tooling&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;It is my contention that this may be good for short-term productivity, but is almost certainly bad for long-term productivity.&lt;/p&gt;

&lt;p&gt;Take a look at &lt;a href=&quot;/benefits-of-stepping-away-from-your-ide/&quot;&gt;part 2 of this series&lt;/a&gt; to understand why stepping way from an IDE was so beneficial to me.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Do you completely disagree with me? Excellent! Please let me know in the comments.&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Mike Brinker</name>
          
          
        </author>
      

      
        <category term="Tools" />
      

      

      
        <summary type="html">Preface</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">How does DNS work?</title>
      
      
      <link href="https://software.themikejr.com/how-does-dns-work/" rel="alternate" type="text/html" title="How does DNS work?" />
      
      <published>2018-12-27T00:00:00-05:00</published>
      <updated>2018-12-27T00:00:00-05:00</updated>
      <id>https://software.themikejr.com/how-does-dns-work</id>
      <content type="html" xml:base="https://software.themikejr.com/how-does-dns-work/">&lt;p&gt;Whether you realize it or not, DNS is a workhorse of the internet ecosystem. It provides the glue that allows someone like your grandma, (who knows that you want a pair of Adidas Ultraboost from footlocker.com for Christmas) to talk TCP with a server on the other side of the world.&lt;/p&gt;

&lt;p&gt;It’s amazing when you think about it…&lt;/p&gt;

&lt;p&gt;Your grandma really is quite kind.&lt;/p&gt;

&lt;p&gt;So, let’s start from first principles and dig in to understand DNS a bit more.&lt;/p&gt;

&lt;h2 id=&quot;what-exactly-is-dns&quot;&gt;What exactly is DNS?&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;DNS, or the &lt;em&gt;Domain Name System&lt;/em&gt; is an abstraction layer that maps the human-readable web addresses that we know and love to IP addresses.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For a long time, that was about the extent of my knowledge of DNS. I knew that there were servers out in the ether of the internet that contained those mappings.  Later on, I learned that one could use &lt;code class=&quot;highlighter-rouge&quot;&gt;nslookup&lt;/code&gt; to find existing mappings. Beyond that, I knew very little. The majority of the time this was enough, but every now and then I would hear someone mention an &lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt; record or a &lt;code class=&quot;highlighter-rouge&quot;&gt;CNAME&lt;/code&gt; record and I couldn’t contribute much to the conversation other than “Ah yes, that has something to do with DNS”.  If you are like me, the things that you know that you don’t know serve as bread crumbs for the things that you want to learn.  Let’s follow those breadcrumbs a bit.&lt;/p&gt;

&lt;h2 id=&quot;the-lifecycle-of-a-dns-query&quot;&gt;The lifecycle of a DNS query&lt;/h2&gt;

&lt;p&gt;Interview questions like “Tell me everything that happens when I navigate to google.com” are quite fun to answer for me.  This is mainly because there are endless ways to tell the story of all the things that go on when a user does x.  At some point though, we have to limit the detail of our explanations in order to actually provide value. Be forewarned: the explanatory lifecycle of a DNS query below is not exhaustive! Exhaustive references can be useful but not so much in didactic contexts.&lt;/p&gt;

&lt;p&gt;So what happens when a domain name query is issued to DNS?&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Someone named Jeffrey asks their computer to go to google.com&lt;/li&gt;
  &lt;li&gt;The operating system of Jeffrey’s computer consults its own cache to see if the IP address for the requested name is already known. If it is, life is good! If not…&lt;/li&gt;
  &lt;li&gt;Jeffrey’s operating system reaches out to a DNS cacher/recursor which we will refer to as the &lt;em&gt;local DNS server&lt;/em&gt; from here onward. The local DNS server is very often provided by your ISP, but sufficiently advanced LANs will often have their own local DNS server.&lt;/li&gt;
  &lt;li&gt;The &lt;em&gt;local DNS server&lt;/em&gt; will check its cache. If it has an answer to the query, life is good! If not…&lt;/li&gt;
  &lt;li&gt;The local DNS server will recursively contact other DNS servers until it can provide an authoritative answer.  The recursive DNS request looks something like:
    &lt;ul&gt;
      &lt;li&gt;Local DNS server asks a root DNS server where to find the .com TLD (top level domain) server. The root DNS server provides the answer.&lt;/li&gt;
      &lt;li&gt;Local DNS server then asks the .com TLD DNS server for the “google” name server. The .com TLD DNS server provides the answer.&lt;/li&gt;
      &lt;li&gt;Local DNS server asks the “google” DNS server for the google.com IP. The “google” name server provides an answer.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The local DNS server returns the IP address provided by the “google” name server to Jeffrey’s computer. (and hopefully caches the answer!)&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;what-is-a-dns-record&quot;&gt;What is a DNS record?&lt;/h2&gt;

&lt;p&gt;The response provided by a DNS server represents a &lt;em&gt;record&lt;/em&gt; that exists in the Domain Name System. One might find that the responses representing records are referred to as a &lt;em&gt;record&lt;/em&gt; themselves. YMMV.&lt;/p&gt;

&lt;p&gt;Below I explain a few of the common DNS record types. There are many more. For more details you may want to consult this &lt;a href=&quot;https://en.wikipedia.org/wiki/List_of_DNS_record_types&quot;&gt;helpful and complete list&lt;/a&gt; of DNS record types.&lt;/p&gt;

&lt;h3 id=&quot;cname-records&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CNAME&lt;/code&gt; Records&lt;/h3&gt;

&lt;p&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;CNAME&lt;/code&gt; record is said to be “the canonical name for an alias” in &lt;a href=&quot;https://tools.ietf.org/html/rfc1035&quot;&gt;RFC 1035&lt;/a&gt;.  &lt;code class=&quot;highlighter-rouge&quot;&gt;CNAME&lt;/code&gt; records map an alias to another name. Upon receiving a &lt;code class=&quot;highlighter-rouge&quot;&gt;CNAME&lt;/code&gt; response, the  computer issuing a DNS query will restart the query using the value that the &lt;code class=&quot;highlighter-rouge&quot;&gt;CNAME&lt;/code&gt; record points too. Note: While DNS is actually resolving the IP of the canonical name, the original name request (the alias) is what users will see in their browser.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CNAME&lt;/code&gt; records are intended to point to a canonical name, but there is nothing that prevents one from creating a CNAME record that point to another alias. One could even create an infinite loop if they so desired.&lt;/p&gt;

&lt;h3 id=&quot;dname-records&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DNAME&lt;/code&gt; Records&lt;/h3&gt;

&lt;p&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;DNAME&lt;/code&gt; record “provides redirection for a subtree of the domain” accord to its RFC (&lt;a href=&quot;https://tools.ietf.org/html/rfc6672&quot;&gt;RFC 6672&lt;/a&gt;). For this reason is it known as a &lt;em&gt;delegation&lt;/em&gt; record.&lt;/p&gt;

&lt;h3 id=&quot;a--records&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt;  Records&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt; records are described as providing “a host address” in &lt;a href=&quot;https://tools.ietf.org/html/rfc1035&quot;&gt;RFC 1035&lt;/a&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt; records are the meat and potatoes(?) of DNS. The provide a simple mapping from a name to an IP address.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Did I get something wrong? Is there another subset of DNS functionality that needs to be explained? Let me know in the comments.&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Mike Brinker</name>
          
          
        </author>
      

      
        <category term="How Things Work" />
      

      

      
        <summary type="html">Whether you realize it or not, DNS is a workhorse of the internet ecosystem. It provides the glue that allows someone like your grandma, (who knows that you want a pair of Adidas Ultraboost from footlocker.com for Christmas) to talk TCP with a server on the other side of the world.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">The Bad Plus</title>
      
      
      <link href="https://software.themikejr.com/bad-plus/" rel="alternate" type="text/html" title="The Bad Plus" />
      
      <published>2018-12-08T00:00:00-05:00</published>
      <updated>2018-12-08T00:00:00-05:00</updated>
      <id>https://software.themikejr.com/bad-plus</id>
      <content type="html" xml:base="https://software.themikejr.com/bad-plus/">&lt;p&gt;I’ve found over the years that there is some music that is well-suited for listening while doing software-development related work and some music is not. Rather than try to derive a special formula for “coding music” I’m going to tell you about some music that works for me. One group I’ve been listening to for awhile that works particularly well is &lt;em&gt;The Bad Plus&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The Bad Plus&lt;/em&gt; is a jazz piano trio that might not sound like a jazz group to you at first blush. They employ jazz idioms and instrumentation on popular cover tunes and their own originals as well. I find a wide range of mood and tone in their music: calm and nearly ambient, cacophonic excitement, and even straight ahead tunes with lots of energy. Despite the diversity it all works nicely when I’m clacking away on the keyboard.&lt;/p&gt;

&lt;p&gt;I highly recommend catching them live if they are ever playing in your town. The occasions I’m which I had the priviledge of hearing The Bad Plus did not disappoint – YouTube has a nice selection of live recordings available. One can only hope they release more live music in the future.&lt;/p&gt;

&lt;h2 id=&quot;song-selection-for-work&quot;&gt;Song Selection for Work&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Anthem for the Earnest&lt;/li&gt;
  &lt;li&gt;Flim&lt;/li&gt;
  &lt;li&gt;As the Moment Slips Away&lt;/li&gt;
  &lt;li&gt;Beauty Has It Hard&lt;/li&gt;
  &lt;li&gt;We are the Champions&lt;/li&gt;
  &lt;li&gt;Forces&lt;/li&gt;
  &lt;li&gt;Prehensile Dream&lt;/li&gt;
  &lt;li&gt;Silence is the Question&lt;/li&gt;
  &lt;li&gt;1983 Regional All-Star&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=cQNybpWVS3o&quot;&gt;Newport Jazz Festival, 2006&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=11YQwpNM1ng&quot;&gt;Moers Festival, 2017&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Mike Brinker</name>
          
          
        </author>
      

      
        <category term="Music I Listen To While Working" />
      

      

      
        <summary type="html">I’ve found over the years that there is some music that is well-suited for listening while doing software-development related work and some music is not. Rather than try to derive a special formula for “coding music” I’m going to tell you about some music that works for me. One group I’ve been listening to for awhile that works particularly well is The Bad Plus.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">The Serverless Sea Change</title>
      
      
      <link href="https://software.themikejr.com/the-serverless-sea-change/" rel="alternate" type="text/html" title="The Serverless Sea Change" />
      
      <published>2018-12-07T00:00:00-05:00</published>
      <updated>2018-12-07T00:00:00-05:00</updated>
      <id>https://software.themikejr.com/the-serverless-sea-change</id>
      <content type="html" xml:base="https://software.themikejr.com/the-serverless-sea-change/">&lt;p&gt;I read a great article at InfoQ this week called &lt;a href=&quot;https://www.infoq.com/articles/serverless-sea-change&quot;&gt;&lt;em&gt;The Serverless Sea Change&lt;/em&gt;&lt;/a&gt;. Generally, the argument made is that code leads to technical debt, therefore the solution with the least amount of code wins. For example:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you are building a Serviceful Serverless application, you will need to spend significantly more time on research than you would with an application where you will write everything. This is because you will be implementing much more functionality of the application on services, and you need to verify that you are selecting the correct service. You also need to figure out the right way to integrate the service with your application. So instead of spending an hour or two looking for packages you might leverage, you should think about spending days and even weeks writing proof-of-concept code and testing different options.&lt;/p&gt;

  &lt;p&gt;Another way to say this is in two equations:&lt;/p&gt;

  &lt;p&gt;2 Weeks Research + 1 Day Development → N Lines of Code to Maintain&lt;/p&gt;

  &lt;p&gt;1 Day Research + 2 Weeks Development → 10 ⋅ N Lines of Code to Maintain&lt;/p&gt;

  &lt;p&gt;On average, ten times more lines of code is ten times more technical debt, which means increasingly slower and less predictable future development velocity, and systems that cannot be well maintained by the average developer.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I’ve generally remained skeptical as to whether the advantages of serverless architectures outweigh the benefits, or to put it another way, if there are any advantages when all is sasaid and done. For me, the looming issues are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Vendor Lock-in&lt;/li&gt;
  &lt;li&gt;Conversely, the portability of any artifact targeting a FaaS platform&lt;/li&gt;
  &lt;li&gt;The amount of glue needed to make serverless work (any AWS Lambda demo I’ve seen spends more time gluing AWS services together than it does writing code)&lt;/li&gt;
  &lt;li&gt;In the case of AWS, many of the glue services are still beta products&lt;/li&gt;
  &lt;li&gt;Ease of local development&lt;/li&gt;
  &lt;li&gt;The &lt;em&gt;Cold Starts&lt;/em&gt; problem&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I remain skeptical, but this article does a great job of explaining and arguing for the benefits. Also, perhaps I am wrong (!) and we are a few years away from a true “Serverless Sea Change”.&lt;/p&gt;

&lt;p&gt;Be sure to check out the whole article over at &lt;a href=&quot;https://www.infoq.com/articles/serverless-sea-change&quot;&gt;InfoQ&lt;/a&gt;.&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Mike Brinker</name>
          
          
        </author>
      

      
        <category term="What I've Been Reading" />
      

      

      
        <summary type="html">I read a great article at InfoQ this week called The Serverless Sea Change. Generally, the argument made is that code leads to technical debt, therefore the solution with the least amount of code wins. For example:</summary>
      

      
      
    </entry>
  
  
</feed>
